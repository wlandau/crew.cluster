[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement .landau@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Development community effort, welcome participation.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing","text":"Please note crew.cluster project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/CONTRIBUTING.html","id":"discussions","dir":"","previous_headings":"","what":"Discussions","title":"Contributing","text":"https://github.com/wlandau/crew.cluster/discussions, can post general questions, brainstorm ideas, ask help.","code":""},{"path":"/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing","text":"https://github.com/wlandau/crew.cluster/issues bug reports, performance issues, maintenance tasks, feature requests. post, please abide following guidelines. posting new issue discussion topic, please take moment search existing similar threads order avoid duplication. bug reports: can, please install latest GitHub version crew.cluster (.e. remotes::install_github(\"wlandau/crew.cluster\")) verify issue still persists. Describe issue prose clearly concisely possible. Runnable: post enough R code data onlooker can create error computer. Minimal: reduce runtime wherever possible remove complicated details irrelevant issue hand. Readable: format code according tidyverse style guide.","code":""},{"path":"/CONTRIBUTING.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Contributing","text":"External code contributions extremely helpful right circumstances. recommended steps. Prior contribution, please propose idea discussion topic issue thread maintainer can define intent scope work. Fork repository. Follow GitHub flow create new branch, add commits, open pull request. Discuss code maintainer pull request thread. everything looks good, maintainer merge code project. Please also follow additional guidelines. Respect architecture reasoning package. Depending scope work, may want read design documents (package vignettes). possible, keep contributions small enough easily review manually. okay split work multiple pull requests. Format code according tidyverse style guide check formatting lint_package() function lintr package. new features functionality, add tests tests. Tests can automated go tests/testthat/. Tests automated go tests/interactive/. features affecting performance, good practice add profiling studies tests/performance/. Check code coverage covr::package_coverage(). Automated tests cover new changed functionality pull request. Run overall package checks devtools::check() goodpractice::gp() Describe contribution project’s NEWS.md file. sure mention relevent GitHub issue numbers GitHub name done existing news entries. feel contribution substantial enough official author contributor status, please add Authors@R field DESCRIPTION file.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Eli Lilly Company Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/PULL_REQUEST_TEMPLATE.html","id":null,"dir":"","previous_headings":"","what":"Prework","title":"Prework","text":"understand agree Contributor Code Conduct. already submitted discussion topic issue discuss idea maintainer.","code":""},{"path":"/PULL_REQUEST_TEMPLATE.html","id":"related-github-issues-and-pull-requests","dir":"","previous_headings":"","what":"Related GitHub issues and pull requests","title":"Prework","text":"Ref: #","code":""},{"path":"/PULL_REQUEST_TEMPLATE.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Prework","text":"Please explain purpose scope contribution.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"William Michael Landau. Author, maintainer. Michael Gilbert Levin. Author. Brendan Furneaux. Author. Eli Lilly Company. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Landau WM, Levin MG, Furneaux B (2024). crew.cluster: Crew Launcher Plugins Traditional High-Performance Computing Clusters. R package version 0.3.2.9000, https://github.com/wlandau/crew.cluster, https://wlandau.github.io/crew.cluster/.","code":"@Manual{,   title = {crew.cluster: Crew Launcher Plugins for Traditional High-Performance Computing Clusters},   author = {William Michael Landau and Michael Gilbert Levin and Brendan Furneaux},   year = {2024},   note = {R package version 0.3.2.9000,   https://github.com/wlandau/crew.cluster},   url = {https://wlandau.github.io/crew.cluster/}, }"},{"path":"/index.html","id":"crewcluster-crew-launcher-plugins-for-traditional-high-performance-computing-clusters-","dir":"","previous_headings":"","what":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"computationally demanding analysis projects, statisticians data scientists asynchronously deploy long-running tasks distributed systems, ranging traditional clusters cloud services. crew.cluster package extends mirai-powered ‘crew’ package worker launcher plugins traditional high-performance computing systems. Inspiration also comes packages mirai, future, rrq, clustermq, batchtools.","code":""},{"path":[]},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"Please see https://wlandau.github.io/crew.cluster/ documentation, including full function reference usage tutorial.","code":""},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"First, create controller object appropriate platform. example, launch workers Sun Grid Engine (SGE) cluster, use crew_controller_sge(). point, usage exactly basic crew. push() method submits tasks auto-scales SGE workers meet demand. pop() method retrieves available tasks. Remember terminate controller done.","code":"library(crew.cluster) controller <- crew_controller_sge(   name = \"my_workflow\", # for informative job names   workers = 16,   tasks_max = 2, # to avoid reaching wall time limits   seconds_idle = 10, # to release resources when they are not needed   script_lines = \"module load R\" # if R is an environment module ) controller$start() controller$push(name = \"do work\", command = do_work()) controller$pop() #> # A tibble: 1 × 11 #>   name         command result seconds   seed error trace warni…¹ launc…² worker insta…³ #>   <chr>        <chr>   <list>   <dbl>  <int> <chr> <chr> <chr>   <chr>    <int> <chr>   #> 1 do work   … do_work… <int>        0 1.56e8 NA    NA    NA      79e71c…      1 7686b2… #> # … with abbreviated variable names ¹​warnings, ²​launcher, ³​instance controller$terminate()"},{"path":"/index.html","id":"monitoring","dir":"","previous_headings":"","what":"Monitoring","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"manage resource usage, may choose list manually terminate cluster jobs using crew_monitor_sge() supported monitors. Example SGE: monitor$terminate(= TRUE) terminates SGE jobs, regardless whether crew.cluster created .","code":"monitor <- crew_monitor_sge() job_list <- monitor$jobs() job_list #> # A tibble: 2 × 9 #>   job_number prio    name    owner state start_time queue_name jclass_name slots #>   <chr>      <chr>   <chr>   <chr> <chr> <chr>      <chr>      <lgl>       <chr> #> 1 131853812  0.05000 crew-m… USER… r     2024-01-0… all.norma… NA          1     #> 2 131853813  0.05000 crew-m… USER… r     2024-01-0… all.norma… NA          1 monitor$terminate(jobs = job_list$job_number) #> USER has registered the job 131853812 for deletion #> USER has registered the job 131853813 for deletion monitor$jobs() #> data frame with 0 columns and 0 rows"},{"path":"/index.html","id":"tips","dir":"","previous_headings":"","what":"Tips","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"crew.cluster submits jobs local network using system calls resource manager (e.g SGE SLURM). Please invoke crew.cluster node cluster, either login node (head node) compute node. clusters install software like R versioned environment modules. likely, need call module load R (module load R/x.y.z specific version) order use cluster. crew.cluster, likely need supply \"module load R\" similar script_lines argument e.g. crew_controller_sge().","code":""},{"path":"/index.html","id":"risks","dir":"","previous_headings":"","what":"Risks","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"risks crew.cluster crew, plus risks traditional high-performance computing environments. distributed systems typically operate inside firewall trust local network. responsibility assess security systems use crew.cluster safe manner. addition, crew.cluster automatically launches jobs cluster scheduler, may always able terminate leftover jobs. responsibility monitor jobs manually terminate jobs crew.cluster may able .","code":""},{"path":"/index.html","id":"thanks","dir":"","previous_headings":"","what":"Thanks","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"Charlie Gao created mirai nanonext graciously accommodated complicated demanding feature requests made crew ecosystem possible. Thanks Michael Schubert sharing template files clustermq permissive Apache License 2.0. scripts helped construct launcher plugins clusters direct access possible. See NOTICE file package.","code":""},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"Please note crew project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"","code":"citation(\"crew.cluster\")"},{"path":"/reference/crew.cluster-package.html","id":null,"dir":"Reference","previous_headings":"","what":"crew.cluster: crew launcher plugins for traditional high-performance computing clusters — crew.cluster-package","title":"crew.cluster: crew launcher plugins for traditional high-performance computing clusters — crew.cluster-package","text":"computationally demanding analysis projects, statisticians data scientists asynchronously deploy long-running tasks distributed systems, ranging traditional clusters cloud services. crew.cluster package extends mirai-powered crew package worker launcher plugins traditional high-performance computing systems. Inspiration also comes packages mirai, future, rrq, clustermq, batchtools.","code":""},{"path":"/reference/crew.cluster-package.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":"crew.cluster: crew launcher plugins for traditional high-performance computing clusters — crew.cluster-package","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":" Abstract cluster launcher class — crew_class_launcher_cluster","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"R6 class help develop specific cluster launcher plugins.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"See crew_launcher_cluster().","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_class_launcher_cluster.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"crew::crew_class_launcher -> crew_class_launcher_cluster","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"verbose See crew_launcher_cluster(). command_submit See crew_launcher_cluster(). command_terminate See crew_launcher_cluster(). script_directory See crew_launcher_cluster(). script_lines See crew_launcher_cluster(). prefix Character length 1, randomly generated sub-string job names.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"crew::crew_class_launcher$active() crew::crew_class_launcher$booting() crew::crew_class_launcher$call() crew::crew_class_launcher$done() crew::crew_class_launcher$errors() crew::crew_class_launcher$forward() crew::crew_class_launcher$launch() crew::crew_class_launcher$rotate() crew::crew_class_launcher$scale() crew::crew_class_launcher$set_name() crew::crew_class_launcher$settings() crew::crew_class_launcher$start() crew::crew_class_launcher$summary() crew::crew_class_launcher$tally() crew::crew_class_launcher$terminate() crew::crew_class_launcher$terminate_workers() crew::crew_class_launcher$unlaunched() crew::crew_class_launcher$wait()","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"crew_class_launcher_cluster$new() crew_class_launcher_cluster$validate() crew_class_launcher_cluster$launch_worker() crew_class_launcher_cluster$terminate_worker()","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"Abstract launcher constructor.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"","code":"crew_class_launcher_cluster$new(   name = NULL,   seconds_interval = NULL,   seconds_timeout = NULL,   seconds_launch = NULL,   seconds_idle = NULL,   seconds_wall = NULL,   tasks_max = NULL,   tasks_timers = NULL,   reset_globals = NULL,   reset_packages = NULL,   reset_options = NULL,   garbage_collection = NULL,   launch_max = NULL,   tls = NULL,   verbose = NULL,   command_submit = NULL,   command_terminate = NULL,   script_directory = NULL,   script_lines = NULL )"},{"path":"/reference/crew_class_launcher_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"name See crew_launcher_cluster(). seconds_interval See crew_launcher_cluster(). seconds_timeout See crew_launcher_cluster(). seconds_launch See crew_launcher_cluster(). seconds_idle See crew_launcher_cluster(). seconds_wall See crew_launcher_cluster(). tasks_max See crew_launcher_cluster(). tasks_timers See crew_launcher_cluster(). reset_globals See crew_launcher_cluster(). reset_packages See crew_launcher_cluster(). reset_options See crew_launcher_cluster(). garbage_collection See crew_launcher_cluster(). launch_max See crew_launcher_cluster(). tls See crew_launcher_cluster(). verbose See crew_launcher_cluster(). command_submit See crew_launcher_cluster(). command_terminate See crew_launcher_cluster(). script_directory See crew_launcher_cluster(). script_lines See crew_launcher_cluster().","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"abstract launcher object.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"Validate launcher.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"","code":"crew_class_launcher_cluster$validate()"},{"path":"/reference/crew_class_launcher_cluster.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"NULL (invisibly). Throws error field invalid.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"method-launch-worker-","dir":"Reference","previous_headings":"","what":"Method launch_worker()","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"Launch local process worker dial socket.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"","code":"crew_class_launcher_cluster$launch_worker(   call,   name,   launcher,   worker,   instance )"},{"path":"/reference/crew_class_launcher_cluster.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"call Character length 1, namespaced call crew::crew_worker() run worker accept tasks. name Character length 1, informative worker name. launcher Character length 1, name launcher. worker Positive integer length 1, index worker. worker index remains even current instance worker exits new instance launches. always 1 maximum number concurrent workers. instance Character length 1 uniquely identify current instance worker.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"call argument R code run initiate worker.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"handle object allow termination worker later .","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"method-terminate-worker-","dir":"Reference","previous_headings":"","what":"Method terminate_worker()","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"Terminate local process worker.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"","code":"crew_class_launcher_cluster$terminate_worker(handle)"},{"path":"/reference/crew_class_launcher_cluster.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"handle process handle object previously returned launch_worker().","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"NULL (invisibly).","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":null,"dir":"Reference","previous_headings":"","what":" LSF launcher class — crew_class_launcher_lsf","title":" LSF launcher class — crew_class_launcher_lsf","text":"R6 class launch manage LSF workers.","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" LSF launcher class — crew_class_launcher_lsf","text":"See crew_launcher_lsf().","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" LSF launcher class — crew_class_launcher_lsf","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_class_launcher_lsf.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":" LSF launcher class — crew_class_launcher_lsf","text":"crew::crew_class_launcher -> crew.cluster::crew_class_launcher_cluster -> crew_class_launcher_lsf","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":" LSF launcher class — crew_class_launcher_lsf","text":"lsf_cwd See crew_launcher_lsf(). lsf_log_output See crew_launcher_lsf(). lsf_log_error See crew_launcher_lsf(). lsf_memory_gigabytes_limit See crew_launcher_lsf(). lsf_memory_gigabytes_required See crew_launcher_lsf(). lsf_cores See crew_launcher_lsf().","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":" LSF launcher class — crew_class_launcher_lsf","text":"crew::crew_class_launcher$active() crew::crew_class_launcher$booting() crew::crew_class_launcher$call() crew::crew_class_launcher$done() crew::crew_class_launcher$errors() crew::crew_class_launcher$forward() crew::crew_class_launcher$launch() crew::crew_class_launcher$rotate() crew::crew_class_launcher$scale() crew::crew_class_launcher$set_name() crew::crew_class_launcher$settings() crew::crew_class_launcher$start() crew::crew_class_launcher$summary() crew::crew_class_launcher$tally() crew::crew_class_launcher$terminate() crew::crew_class_launcher$terminate_workers() crew::crew_class_launcher$unlaunched() crew::crew_class_launcher$wait() crew.cluster::crew_class_launcher_cluster$launch_worker() crew.cluster::crew_class_launcher_cluster$terminate_worker()","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":" LSF launcher class — crew_class_launcher_lsf","text":"crew_class_launcher_lsf$new() crew_class_launcher_lsf$validate() crew_class_launcher_lsf$script()","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":" LSF launcher class — crew_class_launcher_lsf","text":"LSF launcher constructor.","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":" LSF launcher class — crew_class_launcher_lsf","text":"","code":"crew_class_launcher_lsf$new(   name = NULL,   seconds_interval = NULL,   seconds_timeout = NULL,   seconds_launch = NULL,   seconds_idle = NULL,   seconds_wall = NULL,   tasks_max = NULL,   tasks_timers = NULL,   reset_globals = NULL,   reset_packages = NULL,   reset_options = NULL,   garbage_collection = NULL,   launch_max = NULL,   tls = NULL,   verbose = NULL,   command_submit = NULL,   command_terminate = NULL,   script_directory = NULL,   script_lines = NULL,   lsf_cwd = NULL,   lsf_log_output = NULL,   lsf_log_error = NULL,   lsf_memory_gigabytes_limit = NULL,   lsf_memory_gigabytes_required = NULL,   lsf_cores = NULL )"},{"path":"/reference/crew_class_launcher_lsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" LSF launcher class — crew_class_launcher_lsf","text":"name See crew_launcher_lsf(). seconds_interval See crew_launcher_lsf(). seconds_timeout See crew_launcher_lsf(). seconds_launch See crew_launcher_lsf(). seconds_idle See crew_launcher_lsf(). seconds_wall See crew_launcher_lsf(). tasks_max See crew_launcher_lsf(). tasks_timers See crew_launcher_lsf(). reset_globals See crew_launcher_lsf(). reset_packages See crew_launcher_lsf(). reset_options See crew_launcher_lsf(). garbage_collection See crew_launcher_lsf(). launch_max See crew_launcher_lsf(). tls See crew_launcher_lsf(). verbose See crew_launcher_lsf(). command_submit See crew_launcher_lsf(). command_terminate See crew_launcher_lsf(). script_directory See crew_launcher_lsf(). script_lines See crew_launcher_lsf(). lsf_cwd See crew_launcher_lsf(). lsf_log_output See crew_launcher_lsf(). lsf_log_error See crew_launcher_lsf(). lsf_memory_gigabytes_limit See crew_launcher_lsf(). lsf_memory_gigabytes_required See crew_launcher_lsf(). lsf_cores See crew_launcher_lsf().","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":" LSF launcher class — crew_class_launcher_lsf","text":"LSF launcher object.","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":" LSF launcher class — crew_class_launcher_lsf","text":"Validate launcher.","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":" LSF launcher class — crew_class_launcher_lsf","text":"","code":"crew_class_launcher_lsf$validate()"},{"path":"/reference/crew_class_launcher_lsf.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":" LSF launcher class — crew_class_launcher_lsf","text":"NULL (invisibly). Throws error field invalid.","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"method-script-","dir":"Reference","previous_headings":"","what":"Method script()","title":" LSF launcher class — crew_class_launcher_lsf","text":"Generate job script.","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":" LSF launcher class — crew_class_launcher_lsf","text":"","code":"crew_class_launcher_lsf$script(name)"},{"path":"/reference/crew_class_launcher_lsf.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":" LSF launcher class — crew_class_launcher_lsf","text":"name Character length 1, name job. inspection purposes, can supply mock job name.","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":" LSF launcher class — crew_class_launcher_lsf","text":"Includes everything except worker-instance-specific job name worker-instance-specific call crew::crew_worker(), get inserted bottom script launch time.","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":" LSF launcher class — crew_class_launcher_lsf","text":"Character vector lines job script.","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":" LSF launcher class — crew_class_launcher_lsf","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { launcher <- crew_launcher_lsf(   lsf_cwd = getwd(),   lsf_log_output = \"log_file_%J.log\",   lsf_log_error = NULL,   lsf_memory_gigabytes_limit = 4 ) launcher$script(name = \"my_job_name\") }"},{"path":"/reference/crew_class_launcher_lsf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" LSF launcher class — crew_class_launcher_lsf","text":"","code":"## ------------------------------------------------ ## Method `crew_class_launcher_lsf$script` ## ------------------------------------------------  if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { launcher <- crew_launcher_lsf(   lsf_cwd = getwd(),   lsf_log_output = \"log_file_%J.log\",   lsf_log_error = NULL,   lsf_memory_gigabytes_limit = 4 ) launcher$script(name = \"my_job_name\") }"},{"path":"/reference/crew_class_launcher_pbs.html","id":null,"dir":"Reference","previous_headings":"","what":" PBS/TORQUE launcher class — crew_class_launcher_pbs","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"R6 class launch manage PBS/TORQUE workers.","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"See crew_launcher_pbs().","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_class_launcher_pbs.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"crew::crew_class_launcher -> crew.cluster::crew_class_launcher_cluster -> crew_class_launcher_pbs","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"pbs_cwd See crew_launcher_pbs(). pbs_log_output See crew_launcher_pbs(). pbs_log_error See crew_launcher_pbs(). pbs_log_join See crew_launcher_pbs(). pbs_memory_gigabytes_required See crew_launcher_pbs(). pbs_cores See crew_launcher_pbs(). pbs_walltime_hours See crew_launcher_pbs().","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"crew::crew_class_launcher$active() crew::crew_class_launcher$booting() crew::crew_class_launcher$call() crew::crew_class_launcher$done() crew::crew_class_launcher$errors() crew::crew_class_launcher$forward() crew::crew_class_launcher$launch() crew::crew_class_launcher$rotate() crew::crew_class_launcher$scale() crew::crew_class_launcher$set_name() crew::crew_class_launcher$settings() crew::crew_class_launcher$start() crew::crew_class_launcher$summary() crew::crew_class_launcher$tally() crew::crew_class_launcher$terminate() crew::crew_class_launcher$terminate_workers() crew::crew_class_launcher$unlaunched() crew::crew_class_launcher$wait() crew.cluster::crew_class_launcher_cluster$launch_worker() crew.cluster::crew_class_launcher_cluster$terminate_worker()","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"crew_class_launcher_pbs$new() crew_class_launcher_pbs$validate() crew_class_launcher_pbs$script()","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"PBS/TORQUE launcher constructor.","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"","code":"crew_class_launcher_pbs$new(   name = NULL,   seconds_interval = NULL,   seconds_timeout = NULL,   seconds_launch = NULL,   seconds_idle = NULL,   seconds_wall = NULL,   tasks_max = NULL,   tasks_timers = NULL,   reset_globals = NULL,   reset_packages = NULL,   reset_options = NULL,   garbage_collection = NULL,   launch_max = NULL,   tls = NULL,   verbose = NULL,   command_submit = NULL,   command_terminate = NULL,   script_directory = NULL,   script_lines = NULL,   pbs_cwd = NULL,   pbs_log_output = NULL,   pbs_log_error = NULL,   pbs_log_join = NULL,   pbs_memory_gigabytes_required = NULL,   pbs_cores = NULL,   pbs_walltime_hours = NULL )"},{"path":"/reference/crew_class_launcher_pbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"name See crew_launcher_pbs(). seconds_interval See crew_launcher_slurm(). seconds_timeout See crew_launcher_slurm(). seconds_launch See crew_launcher_pbs(). seconds_idle See crew_launcher_pbs(). seconds_wall See crew_launcher_pbs(). tasks_max See crew_launcher_pbs(). tasks_timers See crew_launcher_pbs(). reset_globals See crew_launcher_pbs(). reset_packages See crew_launcher_pbs(). reset_options See crew_launcher_pbs(). garbage_collection See crew_launcher_pbs(). launch_max See crew_launcher_pbs(). tls See crew_launcher_pbs(). verbose See crew_launcher_pbs(). command_submit See crew_launcher_pbs(). command_terminate See crew_launcher_pbs(). script_directory See crew_launcher_pbs(). script_lines See crew_launcher_pbs(). pbs_cwd See crew_launcher_sge(). pbs_log_output See crew_launcher_pbs(). pbs_log_error See crew_launcher_pbs(). pbs_log_join See crew_launcher_pbs(). pbs_memory_gigabytes_required See crew_launcher_pbs(). pbs_cores See crew_launcher_pbs(). pbs_walltime_hours See crew_launcher_pbs().","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"PBS/TORQUE launcher object.","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"Validate launcher.","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"","code":"crew_class_launcher_pbs$validate()"},{"path":"/reference/crew_class_launcher_pbs.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"NULL (invisibly). Throws error field invalid.","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"method-script-","dir":"Reference","previous_headings":"","what":"Method script()","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"Generate job script.","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"","code":"crew_class_launcher_pbs$script(name)"},{"path":"/reference/crew_class_launcher_pbs.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"name Character length 1, name job. inspection purposes, can supply mock job name.","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"Includes everything except worker-instance-specific job name worker-instance-specific call crew::crew_worker(), get inserted bottom script launch time.","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"Character vector lines job script.","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { launcher <- crew_launcher_pbs(   pbs_cores = 2,   pbs_memory_gigabytes_required = 4 ) launcher$script(name = \"my_job_name\") }"},{"path":"/reference/crew_class_launcher_pbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"","code":"## ------------------------------------------------ ## Method `crew_class_launcher_pbs$script` ## ------------------------------------------------  if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { launcher <- crew_launcher_pbs(   pbs_cores = 2,   pbs_memory_gigabytes_required = 4 ) launcher$script(name = \"my_job_name\") }"},{"path":"/reference/crew_class_launcher_sge.html","id":null,"dir":"Reference","previous_headings":"","what":" SGE launcher class — crew_class_launcher_sge","title":" SGE launcher class — crew_class_launcher_sge","text":"R6 class launch manage SGE workers.","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" SGE launcher class — crew_class_launcher_sge","text":"See crew_launcher_sge().","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" SGE launcher class — crew_class_launcher_sge","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_class_launcher_sge.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":" SGE launcher class — crew_class_launcher_sge","text":"crew::crew_class_launcher -> crew.cluster::crew_class_launcher_cluster -> crew_class_launcher_sge","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":" SGE launcher class — crew_class_launcher_sge","text":"sge_cwd See crew_launcher_sge(). sge_envvars See crew_launcher_sge(). sge_log_output See crew_launcher_sge(). sge_log_error See crew_launcher_sge(). sge_log_join See crew_launcher_sge(). sge_memory_gigabytes_limit See crew_launcher_sge(). sge_memory_gigabytes_required See crew_launcher_sge(). sge_cores See crew_launcher_sge(). sge_gpu See crew_launcher_sge().","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":" SGE launcher class — crew_class_launcher_sge","text":"crew::crew_class_launcher$active() crew::crew_class_launcher$booting() crew::crew_class_launcher$call() crew::crew_class_launcher$done() crew::crew_class_launcher$errors() crew::crew_class_launcher$forward() crew::crew_class_launcher$launch() crew::crew_class_launcher$rotate() crew::crew_class_launcher$scale() crew::crew_class_launcher$set_name() crew::crew_class_launcher$settings() crew::crew_class_launcher$start() crew::crew_class_launcher$summary() crew::crew_class_launcher$tally() crew::crew_class_launcher$terminate() crew::crew_class_launcher$terminate_workers() crew::crew_class_launcher$unlaunched() crew::crew_class_launcher$wait() crew.cluster::crew_class_launcher_cluster$launch_worker() crew.cluster::crew_class_launcher_cluster$terminate_worker()","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":" SGE launcher class — crew_class_launcher_sge","text":"crew_class_launcher_sge$new() crew_class_launcher_sge$validate() crew_class_launcher_sge$script()","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":" SGE launcher class — crew_class_launcher_sge","text":"SGE launcher constructor.","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":" SGE launcher class — crew_class_launcher_sge","text":"","code":"crew_class_launcher_sge$new(   name = NULL,   seconds_interval = NULL,   seconds_timeout = NULL,   seconds_launch = NULL,   seconds_idle = NULL,   seconds_wall = NULL,   tasks_max = NULL,   tasks_timers = NULL,   reset_globals = NULL,   reset_packages = NULL,   reset_options = NULL,   garbage_collection = NULL,   launch_max = NULL,   tls = NULL,   verbose = NULL,   command_submit = NULL,   command_terminate = NULL,   script_directory = NULL,   script_lines = NULL,   sge_cwd = NULL,   sge_envvars = NULL,   sge_log_output = NULL,   sge_log_error = NULL,   sge_log_join = NULL,   sge_memory_gigabytes_limit = NULL,   sge_memory_gigabytes_required = NULL,   sge_cores = NULL,   sge_gpu = NULL )"},{"path":"/reference/crew_class_launcher_sge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" SGE launcher class — crew_class_launcher_sge","text":"name See crew_launcher_sge(). seconds_interval See crew_launcher_slurm(). seconds_timeout See crew_launcher_slurm(). seconds_launch See crew_launcher_sge(). seconds_idle See crew_launcher_sge(). seconds_wall See crew_launcher_sge(). tasks_max See crew_launcher_sge(). tasks_timers See crew_launcher_sge(). reset_globals See crew_launcher_sge(). reset_packages See crew_launcher_sge(). reset_options See crew_launcher_sge(). garbage_collection See crew_launcher_sge(). launch_max See crew_launcher_sge(). tls See crew_launcher_sge(). verbose See crew_launcher_sge(). command_submit See crew_launcher_sge(). command_terminate See crew_launcher_sge(). script_directory See crew_launcher_sge(). script_lines See crew_launcher_sge(). sge_cwd See crew_launcher_sge(). sge_envvars See crew_launcher_sge(). sge_log_output See crew_launcher_sge(). sge_log_error See crew_launcher_sge(). sge_log_join See crew_launcher_sge(). sge_memory_gigabytes_limit See crew_launcher_sge(). sge_memory_gigabytes_required See crew_launcher_sge(). sge_cores See crew_launcher_sge(). sge_gpu See crew_launcher_sge().","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":" SGE launcher class — crew_class_launcher_sge","text":"SGE launcher object.","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":" SGE launcher class — crew_class_launcher_sge","text":"Validate launcher.","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":" SGE launcher class — crew_class_launcher_sge","text":"","code":"crew_class_launcher_sge$validate()"},{"path":"/reference/crew_class_launcher_sge.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":" SGE launcher class — crew_class_launcher_sge","text":"NULL (invisibly). Throws error field invalid.","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"method-script-","dir":"Reference","previous_headings":"","what":"Method script()","title":" SGE launcher class — crew_class_launcher_sge","text":"Generate job script.","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":" SGE launcher class — crew_class_launcher_sge","text":"","code":"crew_class_launcher_sge$script(name)"},{"path":"/reference/crew_class_launcher_sge.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":" SGE launcher class — crew_class_launcher_sge","text":"name Character length 1, name job. inspection purposes, can supply mock job name.","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":" SGE launcher class — crew_class_launcher_sge","text":"Includes everything except worker-instance-specific job name worker-instance-specific call crew::crew_worker(), get inserted bottom script launch time.","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":" SGE launcher class — crew_class_launcher_sge","text":"Character vector lines job script.","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":" SGE launcher class — crew_class_launcher_sge","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { launcher <- crew_launcher_sge(   sge_cores = 2,   sge_memory_gigabytes_required = 4 ) launcher$script(name = \"my_job_name\") }"},{"path":"/reference/crew_class_launcher_sge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" SGE launcher class — crew_class_launcher_sge","text":"","code":"## ------------------------------------------------ ## Method `crew_class_launcher_sge$script` ## ------------------------------------------------  if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { launcher <- crew_launcher_sge(   sge_cores = 2,   sge_memory_gigabytes_required = 4 ) launcher$script(name = \"my_job_name\") }"},{"path":"/reference/crew_class_launcher_slurm.html","id":null,"dir":"Reference","previous_headings":"","what":" SLURM launcher class — crew_class_launcher_slurm","title":" SLURM launcher class — crew_class_launcher_slurm","text":"R6 class launch manage SLURM workers.","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" SLURM launcher class — crew_class_launcher_slurm","text":"See crew_launcher_slurm().","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" SLURM launcher class — crew_class_launcher_slurm","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_class_launcher_slurm.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":" SLURM launcher class — crew_class_launcher_slurm","text":"crew::crew_class_launcher -> crew.cluster::crew_class_launcher_cluster -> crew_class_launcher_slurm","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":" SLURM launcher class — crew_class_launcher_slurm","text":"slurm_log_output See crew_launcher_slurm(). slurm_log_error See crew_launcher_slurm(). slurm_memory_gigabytes_per_cpu See crew_launcher_slurm(). slurm_cpus_per_task See crew_launcher_slurm(). slurm_time_minutes See crew_launcher_slurm(). slurm_partition See See crew_launcher_slurm().","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":" SLURM launcher class — crew_class_launcher_slurm","text":"crew::crew_class_launcher$active() crew::crew_class_launcher$booting() crew::crew_class_launcher$call() crew::crew_class_launcher$done() crew::crew_class_launcher$errors() crew::crew_class_launcher$forward() crew::crew_class_launcher$launch() crew::crew_class_launcher$rotate() crew::crew_class_launcher$scale() crew::crew_class_launcher$set_name() crew::crew_class_launcher$settings() crew::crew_class_launcher$start() crew::crew_class_launcher$summary() crew::crew_class_launcher$tally() crew::crew_class_launcher$terminate() crew::crew_class_launcher$terminate_workers() crew::crew_class_launcher$unlaunched() crew::crew_class_launcher$wait() crew.cluster::crew_class_launcher_cluster$launch_worker() crew.cluster::crew_class_launcher_cluster$terminate_worker()","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":" SLURM launcher class — crew_class_launcher_slurm","text":"crew_class_launcher_slurm$new() crew_class_launcher_slurm$validate() crew_class_launcher_slurm$script()","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":" SLURM launcher class — crew_class_launcher_slurm","text":"SLURM launcher constructor.","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":" SLURM launcher class — crew_class_launcher_slurm","text":"","code":"crew_class_launcher_slurm$new(   name = NULL,   seconds_interval = NULL,   seconds_timeout = NULL,   seconds_launch = NULL,   seconds_idle = NULL,   seconds_wall = NULL,   tasks_max = NULL,   tasks_timers = NULL,   reset_globals = NULL,   reset_packages = NULL,   reset_options = NULL,   garbage_collection = NULL,   launch_max = NULL,   tls = NULL,   verbose = NULL,   command_submit = NULL,   command_terminate = NULL,   script_directory = NULL,   script_lines = NULL,   slurm_log_output = NULL,   slurm_log_error = NULL,   slurm_memory_gigabytes_per_cpu = NULL,   slurm_cpus_per_task = NULL,   slurm_time_minutes = NULL,   slurm_partition = NULL )"},{"path":"/reference/crew_class_launcher_slurm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" SLURM launcher class — crew_class_launcher_slurm","text":"name See crew_launcher_slurm(). seconds_interval See crew_launcher_slurm(). seconds_timeout See crew_launcher_slurm(). seconds_launch See crew_launcher_slurm(). seconds_idle See crew_launcher_slurm(). seconds_wall See crew_launcher_slurm(). tasks_max See crew_launcher_slurm(). tasks_timers See crew_launcher_slurm(). reset_globals See crew_launcher_slurm(). reset_packages See crew_launcher_slurm(). reset_options See crew_launcher_slurm(). garbage_collection See crew_launcher_slurm(). launch_max See crew_launcher_slurm(). tls See crew_launcher_slurm(). verbose See crew_launcher_slurm(). command_submit See crew_launcher_sge(). command_terminate See crew_launcher_sge(). script_directory See crew_launcher_sge(). script_lines See crew_launcher_sge(). slurm_log_output See crew_launcher_slurm(). slurm_log_error See crew_launcher_slurm(). slurm_memory_gigabytes_per_cpu See crew_launcher_slurm(). slurm_cpus_per_task See crew_launcher_slurm(). slurm_time_minutes See crew_launcher_slurm(). slurm_partition See crew_launcher_slurm().","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":" SLURM launcher class — crew_class_launcher_slurm","text":"SLURM launcher object.","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":" SLURM launcher class — crew_class_launcher_slurm","text":"Validate launcher.","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":" SLURM launcher class — crew_class_launcher_slurm","text":"","code":"crew_class_launcher_slurm$validate()"},{"path":"/reference/crew_class_launcher_slurm.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":" SLURM launcher class — crew_class_launcher_slurm","text":"NULL (invisibly). Throws error field invalid.","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"method-script-","dir":"Reference","previous_headings":"","what":"Method script()","title":" SLURM launcher class — crew_class_launcher_slurm","text":"Generate job script.","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":" SLURM launcher class — crew_class_launcher_slurm","text":"","code":"crew_class_launcher_slurm$script(name)"},{"path":"/reference/crew_class_launcher_slurm.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":" SLURM launcher class — crew_class_launcher_slurm","text":"name Character length 1, name job. inspection purposes, can supply mock job name.","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":" SLURM launcher class — crew_class_launcher_slurm","text":"Includes everything except worker-instance-specific job name worker-instance-specific call crew::crew_worker(), get inserted bottom script launch time.","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":" SLURM launcher class — crew_class_launcher_slurm","text":"Character vector lines job script.","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":" SLURM launcher class — crew_class_launcher_slurm","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { launcher <- crew_launcher_slurm(   slurm_log_output = \"log_file_%A.log\",   slurm_log_error = NULL,   slurm_memory_gigabytes_per_cpu = 4096 ) launcher$script(name = \"my_job_name\") }"},{"path":"/reference/crew_class_launcher_slurm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" SLURM launcher class — crew_class_launcher_slurm","text":"","code":"## ------------------------------------------------ ## Method `crew_class_launcher_slurm$script` ## ------------------------------------------------  if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { launcher <- crew_launcher_slurm(   slurm_log_output = \"log_file_%A.log\",   slurm_log_error = NULL,   slurm_memory_gigabytes_per_cpu = 4096 ) launcher$script(name = \"my_job_name\") }"},{"path":"/reference/crew_class_monitor_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":" Abstract cluster monitor class — crew_class_monitor_cluster","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"Abstract cluster monitor R6 class","code":""},{"path":"/reference/crew_class_monitor_cluster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"See crew_monitor_cluster().","code":""},{"path":[]},{"path":"/reference/crew_class_monitor_cluster.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"verbose See crew_monitor_cluster(). command_list See crew_monitor_cluster(). command_terminate See crew_monitor_cluster().","code":""},{"path":[]},{"path":"/reference/crew_class_monitor_cluster.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"crew_class_monitor_cluster$new() crew_class_monitor_cluster$validate()","code":""},{"path":"/reference/crew_class_monitor_cluster.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"Abstract cluster monitor constructor.","code":""},{"path":"/reference/crew_class_monitor_cluster.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"","code":"crew_class_monitor_cluster$new(   verbose = NULL,   command_list = NULL,   command_terminate = NULL )"},{"path":"/reference/crew_class_monitor_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"verbose See crew_monitor_cluster(). command_list See crew_monitor_cluster(). command_terminate See crew_monitor_cluster().","code":""},{"path":"/reference/crew_class_monitor_cluster.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"abstract cluster monitor object.","code":""},{"path":"/reference/crew_class_monitor_cluster.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"Validate monitor.","code":""},{"path":"/reference/crew_class_monitor_cluster.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"","code":"crew_class_monitor_cluster$validate()"},{"path":"/reference/crew_class_monitor_cluster.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"NULL (invisibly).","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":null,"dir":"Reference","previous_headings":"","what":" SGE monitor class — crew_class_monitor_sge","title":" SGE monitor class — crew_class_monitor_sge","text":"SGE monitor R6 class","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" SGE monitor class — crew_class_monitor_sge","text":"See crew_monitor_sge().","code":""},{"path":[]},{"path":"/reference/crew_class_monitor_sge.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":" SGE monitor class — crew_class_monitor_sge","text":"crew.cluster::crew_class_monitor_cluster -> crew_class_monitor_sge","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":" SGE monitor class — crew_class_monitor_sge","text":"crew.cluster::crew_class_monitor_cluster$initialize() crew.cluster::crew_class_monitor_cluster$validate()","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":" SGE monitor class — crew_class_monitor_sge","text":"crew_class_monitor_sge$jobs() crew_class_monitor_sge$terminate()","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"method-jobs-","dir":"Reference","previous_headings":"","what":"Method jobs()","title":" SGE monitor class — crew_class_monitor_sge","text":"List SGE jobs.","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":" SGE monitor class — crew_class_monitor_sge","text":"","code":"crew_class_monitor_sge$jobs(user = ps::ps_username())"},{"path":"/reference/crew_class_monitor_sge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" SGE monitor class — crew_class_monitor_sge","text":"user Character length 1, user name jobs list.","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":" SGE monitor class — crew_class_monitor_sge","text":"tibble one row per SGE job columns specific details.","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"method-terminate-","dir":"Reference","previous_headings":"","what":"Method terminate()","title":" SGE monitor class — crew_class_monitor_sge","text":"Terminate one SGE jobs.","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":" SGE monitor class — crew_class_monitor_sge","text":"","code":"crew_class_monitor_sge$terminate(jobs = NULL, all = FALSE)"},{"path":"/reference/crew_class_monitor_sge.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":" SGE monitor class — crew_class_monitor_sge","text":"jobs Character vector job names job IDs terminate. Ignored set TRUE. Logical length 1, whether terminate jobs user name. terminates SGE jobs, regardless whether crew.cluster launched , use caution!","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":" SGE monitor class — crew_class_monitor_sge","text":"NULL (invisibly).","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":null,"dir":"Reference","previous_headings":"","what":" SLURM monitor class — crew_class_monitor_slurm","title":" SLURM monitor class — crew_class_monitor_slurm","text":"SLURM monitor R6 class","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" SLURM monitor class — crew_class_monitor_slurm","text":"See crew_monitor_slurm().","code":""},{"path":[]},{"path":"/reference/crew_class_monitor_slurm.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":" SLURM monitor class — crew_class_monitor_slurm","text":"crew.cluster::crew_class_monitor_cluster -> crew_class_monitor_slurm","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":" SLURM monitor class — crew_class_monitor_slurm","text":"crew.cluster::crew_class_monitor_cluster$initialize() crew.cluster::crew_class_monitor_cluster$validate()","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":" SLURM monitor class — crew_class_monitor_slurm","text":"crew_class_monitor_slurm$jobs() crew_class_monitor_slurm$terminate()","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"method-jobs-","dir":"Reference","previous_headings":"","what":"Method jobs()","title":" SLURM monitor class — crew_class_monitor_slurm","text":"List SLURM jobs.","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":" SLURM monitor class — crew_class_monitor_slurm","text":"","code":"crew_class_monitor_slurm$jobs(user = ps::ps_username())"},{"path":"/reference/crew_class_monitor_slurm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" SLURM monitor class — crew_class_monitor_slurm","text":"user Character length 1, user name jobs list.","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":" SLURM monitor class — crew_class_monitor_slurm","text":"function loads entire SLURM queue users, may take several seconds execute. intended interactive use, especially avoided scripts called frequently. requires SLURM version 20.02 higher, along YAML plugin.","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":" SLURM monitor class — crew_class_monitor_slurm","text":"tibble one row per SLURM job columns specific details.","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"method-terminate-","dir":"Reference","previous_headings":"","what":"Method terminate()","title":" SLURM monitor class — crew_class_monitor_slurm","text":"Terminate one SLURM jobs.","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":" SLURM monitor class — crew_class_monitor_slurm","text":"","code":"crew_class_monitor_slurm$terminate(jobs = NULL, all = FALSE)"},{"path":"/reference/crew_class_monitor_slurm.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":" SLURM monitor class — crew_class_monitor_slurm","text":"jobs Character vector job names job IDs terminate. Ignored set TRUE. Logical length 1, whether terminate jobs user name. terminates SLURM jobs, regardless whether crew.cluster launched , use caution!","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":" SLURM monitor class — crew_class_monitor_slurm","text":"NULL (invisibly).","code":""},{"path":"/reference/crew_controller_lsf.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a controller with a LSF launcher. — crew_controller_lsf","title":" Create a controller with a LSF launcher. — crew_controller_lsf","text":"Create R6 object submit tasks launch workers LSF workers.","code":""},{"path":"/reference/crew_controller_lsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a controller with a LSF launcher. — crew_controller_lsf","text":"","code":"crew_controller_lsf(   name = NULL,   workers = 1L,   host = NULL,   port = NULL,   tls = crew::crew_tls(mode = \"automatic\"),   tls_enable = NULL,   tls_config = NULL,   seconds_interval = 0.25,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = Inf,   seconds_wall = Inf,   seconds_exit = NULL,   retry_tasks = TRUE,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   launch_max = 5L,   verbose = FALSE,   command_submit = as.character(Sys.which(\"bsub\")),   command_terminate = as.character(Sys.which(\"bkill\")),   command_delete = NULL,   script_directory = tempdir(),   script_lines = character(0L),   lsf_cwd = getwd(),   lsf_log_output = \"/dev/null\",   lsf_log_error = \"/dev/null\",   lsf_memory_gigabytes_limit = NULL,   lsf_memory_gigabytes_required = NULL,   lsf_cores = NULL )"},{"path":"/reference/crew_controller_lsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a controller with a LSF launcher. — crew_controller_lsf","text":"name Name client object. NULL, name automatically generated. workers Integer, maximum number parallel workers run. host IP address mirai client send receive tasks. NULL, host defaults local IP address. port TCP port listen workers. NULL, available ephemeral port automatically chosen. tls TLS configuration object crew_tls(). tls_enable Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. tls_config Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete, checking mirai::status() seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). seconds_exit Deprecated 2023-09-21 version 0.1.2.9000. longer necessary. retry_tasks TRUE automatically retry task event unexpected worker exit. FALSE give first exit return mirai error code (code number 19). TRUE (default) recommended situations. Use FALSE debugging purposes, e.g. confirm task causing worker run memory crash way. tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals TRUE reset global environment variables tasks, FALSE leave alone. reset_packages TRUE unload packages loaded task (runs task), FALSE leave packages alone. reset_options TRUE reset global options original state task, FALSE otherwise. recommended set reset_options = TRUE reset_packages also TRUE packages sometimes rely options set loading time. garbage_collection TRUE run garbage collection tasks, FALSE skip. launch_max Positive integer length 1, maximum allowed consecutive launch attempts complete tasks. Enforced worker--worker basis. futile launch count resets back 0 worker completes task. recommended set launch_max 0 sometimes workers unproductive perfectly ordinary circumstances. launch_max still small enough detect errors underlying platform. verbose Logical, whether see console output error messages submitting worker. command_submit Character length 1, file path executable submit worker job. command_terminate Character length 1, file path executable terminate worker job. Set \"\" skip manually terminating worker. Unless issue platform, job still exit thanks NNG-powered network programming capabilities mirai. Still, set command_terminate = \"\", assuming extra responsibility manually monitoring jobs cluster manually terminating jobs appropriate. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Character length 1, directory path job scripts. Just job submission, job script created folder. Script base names unique launcher worker, launcher deletes script worker manually terminated. tempdir() default, might work systems. tools::R_user_dir(\"crew.cluster\", = \"cache\") another reasonable choice. script_lines Optional character vector additional lines added job script just common flags. example script_lines = \"module load R\" cluster supports R environment module. lsf_cwd Character length 1, directory launch worker (opposed system default). lsf_cwd = \"/home\" translates line #BSUB -cwd /home LSF job script. lsf_cwd = getwd() default, launches workers current working directory. Set lsf_cwd = NULL omit line job script. lsf_log_output Character length 1, file pattern control locations LSF worker log files. default, standard output standard error go file. lsf_log_output = \"crew_log_%J.log\" translates line #BSUB -o crew_log_%J.log LSF job script, %J replaced job ID worker. default /dev/null omit logs. Set lsf_log_output = NULL omit line job script. lsf_log_error Character length 1, file pattern standard error. lsf_log_error = \"crew_error_%J.err\" translates line #BSUB -e crew_error_%J.err LSF job script, %J replaced job ID worker. default /dev/null omit logs. Set lsf_log_error = NULL omit line job script. lsf_memory_gigabytes_limit Positive numeric length 1 limit gigabytes lsf_memory_gigabytes_limit = 4 translates line #BSUB -M 4G LSF job script. lsf_memory_gigabytes_limit = NULL omits line. lsf_memory_gigabytes_required Positive numeric length 1 memory requirement gigabytes lsf_memory_gigabytes_required = 4 translates line #BSUB -R 'rusage[mem=4G]' LSF job script. lsf_memory_gigabytes_required = NULL omits line. lsf_cores Optional positive integer length 1, number CPU cores worker. lsf_cores = 4 translates line #BSUB -n 4 LSF job script. lsf_cores = NULL omits line.","code":""},{"path":"/reference/crew_controller_lsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Create a controller with a LSF launcher. — crew_controller_lsf","text":"WARNING: crew.cluster LSF plugin experimental actually tested LSF cluster. Please proceed caution report bugs https://github.com/wlandau/crew.cluster.","code":""},{"path":"/reference/crew_controller_lsf.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create a controller with a LSF launcher. — crew_controller_lsf","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_controller_lsf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" Create a controller with a LSF launcher. — crew_controller_lsf","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { controller <- crew_controller_lsf() controller$start() controller$push(name = \"task\", command = sqrt(4)) controller$wait() controller$pop()$result controller$terminate() }"},{"path":"/reference/crew_controller_pbs.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a controller with a PBS/TORQUE launcher. — crew_controller_pbs","title":" Create a controller with a PBS/TORQUE launcher. — crew_controller_pbs","text":"Create R6 object submit tasks launch workers PBS TORQUE cluster.","code":""},{"path":"/reference/crew_controller_pbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a controller with a PBS/TORQUE launcher. — crew_controller_pbs","text":"","code":"crew_controller_pbs(   name = NULL,   workers = 1L,   host = NULL,   port = NULL,   tls = crew::crew_tls(mode = \"automatic\"),   tls_enable = NULL,   tls_config = NULL,   seconds_interval = 0.25,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = Inf,   seconds_wall = Inf,   seconds_exit = NULL,   retry_tasks = TRUE,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   launch_max = 5L,   verbose = FALSE,   command_submit = as.character(Sys.which(\"qsub\")),   command_terminate = as.character(Sys.which(\"qdel\")),   command_delete = NULL,   script_directory = tempdir(),   script_lines = character(0L),   pbs_cwd = TRUE,   pbs_log_output = \"/dev/null\",   pbs_log_error = NULL,   pbs_log_join = TRUE,   pbs_memory_gigabytes_required = NULL,   pbs_cores = NULL,   pbs_walltime_hours = 12 )"},{"path":"/reference/crew_controller_pbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a controller with a PBS/TORQUE launcher. — crew_controller_pbs","text":"name Name client object. NULL, name automatically generated. workers Integer, maximum number parallel workers run. host IP address mirai client send receive tasks. NULL, host defaults local IP address. port TCP port listen workers. NULL, available ephemeral port automatically chosen. tls TLS configuration object crew_tls(). tls_enable Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. tls_config Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete, checking mirai::status() seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). seconds_exit Deprecated 2023-09-21 version 0.1.2.9000. longer necessary. retry_tasks TRUE automatically retry task event unexpected worker exit. FALSE give first exit return mirai error code (code number 19). TRUE (default) recommended situations. Use FALSE debugging purposes, e.g. confirm task causing worker run memory crash way. tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals TRUE reset global environment variables tasks, FALSE leave alone. reset_packages TRUE unload packages loaded task (runs task), FALSE leave packages alone. reset_options TRUE reset global options original state task, FALSE otherwise. recommended set reset_options = TRUE reset_packages also TRUE packages sometimes rely options set loading time. garbage_collection TRUE run garbage collection tasks, FALSE skip. launch_max Positive integer length 1, maximum allowed consecutive launch attempts complete tasks. Enforced worker--worker basis. futile launch count resets back 0 worker completes task. recommended set launch_max 0 sometimes workers unproductive perfectly ordinary circumstances. launch_max still small enough detect errors underlying platform. verbose Logical, whether see console output error messages submitting worker. command_submit Character length 1, file path executable submit worker job. command_terminate Character length 1, file path executable terminate worker job. Set \"\" skip manually terminating worker. Unless issue platform, job still exit thanks NNG-powered network programming capabilities mirai. Still, set command_terminate = \"\", assuming extra responsibility manually monitoring jobs cluster manually terminating jobs appropriate. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Character length 1, directory path job scripts. Just job submission, job script created folder. Script base names unique launcher worker, launcher deletes script worker manually terminated. tempdir() default, might work systems. tools::R_user_dir(\"crew.cluster\", = \"cache\") another reasonable choice. script_lines Optional character vector additional lines added job script just common flags. example script_lines = \"module load R\" cluster supports R environment module. pbs_cwd Logical length 1, whether set working directory worker working directory launched . pbs_cwd = TRUE translates line cd \"$PBS_O_WORKDIR\" job script. line inserted content script_lines make sure #PBS directives system commands. pbs_cwd = FALSE omits line. pbs_log_output Character length 1, file directory path PBS worker log files standard output. pbs_log_output = \"VALUE\" translates line #PBS -o VALUE PBS job script. default /dev/null omit logs. supply non-/dev/null value, recommended supply directory path trailing slash worker gets set log files. pbs_log_error Character length 1, file directory path PBS worker log files standard error. pbs_log_error = \"VALUE\" translates line #PBS -e VALUE PBS job script. default NULL omits line. supply non-/dev/null value, recommended supply directory path trailing slash worker gets set log files. pbs_log_join Logical, whether join stdout stderr log files together one file. pbs_log_join = TRUE translates line #PBS -j oe PBS job script, pbs_log_join = FALSE equivalent #PBS -j n. pbs_log_join = TRUE, pbs_log_error NULL. pbs_memory_gigabytes_required Optional positive numeric length 1 gigabytes memory required run worker. pbs_memory_gigabytes_required = 2.4 translates line #PBS -l mem=2.4gb PBS job script. pbs_memory_gigabytes_required = NULL omits line. pbs_cores Optional positive integer length 1, number cores per worker (\"slots\" PBS lingo). pbs_cores = 4 translates line #PBS -l ppn=4 PBS job script. pbs_cores = NULL omits line. pbs_walltime_hours Numeric length 1 hours wall time request job. pbs_walltime_hours = 23 translates line #PBS -l walltime=23:00:00 job script. pbs_walltime_hours = NULL omits line.","code":""},{"path":"/reference/crew_controller_pbs.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create a controller with a PBS/TORQUE launcher. — crew_controller_pbs","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_controller_pbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" Create a controller with a PBS/TORQUE launcher. — crew_controller_pbs","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { controller <- crew_controller_pbs() controller$start() controller$push(name = \"task\", command = sqrt(4)) controller$wait() controller$pop()$result controller$terminate() }"},{"path":"/reference/crew_controller_sge.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a controller with a Sun Grid Engine (SGE) launcher. — crew_controller_sge","title":" Create a controller with a Sun Grid Engine (SGE) launcher. — crew_controller_sge","text":"Create R6 object submit tasks launch workers Sun Grid Engine (SGE) workers.","code":""},{"path":"/reference/crew_controller_sge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a controller with a Sun Grid Engine (SGE) launcher. — crew_controller_sge","text":"","code":"crew_controller_sge(   name = NULL,   workers = 1L,   host = NULL,   port = NULL,   tls = crew::crew_tls(mode = \"automatic\"),   tls_enable = NULL,   tls_config = NULL,   seconds_interval = 0.25,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = Inf,   seconds_wall = Inf,   seconds_exit = NULL,   retry_tasks = TRUE,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   launch_max = 5L,   verbose = FALSE,   command_submit = as.character(Sys.which(\"qsub\")),   command_terminate = as.character(Sys.which(\"qdel\")),   command_delete = NULL,   script_directory = tempdir(),   script_lines = character(0L),   sge_cwd = TRUE,   sge_envvars = FALSE,   sge_log_output = \"/dev/null\",   sge_log_error = NULL,   sge_log_join = TRUE,   sge_memory_gigabytes_limit = NULL,   sge_memory_gigabytes_required = NULL,   sge_cores = NULL,   sge_gpu = NULL )"},{"path":"/reference/crew_controller_sge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a controller with a Sun Grid Engine (SGE) launcher. — crew_controller_sge","text":"name Name client object. NULL, name automatically generated. workers Integer, maximum number parallel workers run. host IP address mirai client send receive tasks. NULL, host defaults local IP address. port TCP port listen workers. NULL, available ephemeral port automatically chosen. tls TLS configuration object crew_tls(). tls_enable Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. tls_config Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete, checking mirai::status() seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). seconds_exit Deprecated 2023-09-21 version 0.1.2.9000. longer necessary. retry_tasks TRUE automatically retry task event unexpected worker exit. FALSE give first exit return mirai error code (code number 19). TRUE (default) recommended situations. Use FALSE debugging purposes, e.g. confirm task causing worker run memory crash way. tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals TRUE reset global environment variables tasks, FALSE leave alone. reset_packages TRUE unload packages loaded task (runs task), FALSE leave packages alone. reset_options TRUE reset global options original state task, FALSE otherwise. recommended set reset_options = TRUE reset_packages also TRUE packages sometimes rely options set loading time. garbage_collection TRUE run garbage collection tasks, FALSE skip. launch_max Positive integer length 1, maximum allowed consecutive launch attempts complete tasks. Enforced worker--worker basis. futile launch count resets back 0 worker completes task. recommended set launch_max 0 sometimes workers unproductive perfectly ordinary circumstances. launch_max still small enough detect errors underlying platform. verbose Logical, whether see console output error messages submitting worker. command_submit Character length 1, file path executable submit worker job. command_terminate Character length 1, file path executable terminate worker job. Set \"\" skip manually terminating worker. Unless issue platform, job still exit thanks NNG-powered network programming capabilities mirai. Still, set command_terminate = \"\", assuming extra responsibility manually monitoring jobs cluster manually terminating jobs appropriate. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Character length 1, directory path job scripts. Just job submission, job script created folder. Script base names unique launcher worker, launcher deletes script worker manually terminated. tempdir() default, might work systems. tools::R_user_dir(\"crew.cluster\", = \"cache\") another reasonable choice. script_lines Optional character vector additional lines added job script just common flags. example script_lines = \"module load R\" cluster supports R environment module. sge_cwd Logical length 1, whether launch worker current working directory (opposed user home directory). sge_cwd = TRUE translates line #$ -cwd SGE job script. sge_cwd = FALSE omits line. sge_envvars Logical length 1, whether forward environment variables current session SGE worker. sge_envvars = TRUE translates line #$ -V SGE job script. sge_envvars = FALSE omits line. sge_log_output Character length 1, file directory path SGE worker log files standard output. sge_log_output = \"VALUE\" translates line #$ -o VALUE SGE job script. default /dev/null omit logs. supply non-/dev/null value, recommended supply directory path trailing slash worker gets set log files. sge_log_error Character length 1, file directory path SGE worker log files standard error. sge_log_error = \"VALUE\" translates line #$ -e VALUE SGE job script. default NULL omits line. supply non-/dev/null value, recommended supply directory path trailing slash worker gets set log files. sge_log_join Logical, whether join stdout stderr log files together one file. sge_log_join = TRUE translates line #$ -j y SGE job script, sge_log_join = FALSE equivalent #$ -j n. sge_log_join = TRUE, sge_log_error NULL. sge_memory_gigabytes_limit Optional numeric length 1 maximum number gigabytes memory worker allowed consume. worker consumes level memory, SGE terminate . sge_memory_gigabytes_limit = 5.7\" translates line \"#$ -l h_rss=5.7G\" SGE job script. sge_memory_gigabytes_limit = NULL omits line. sge_memory_gigabytes_required Optional positive numeric length 1 gigabytes memory required run worker. sge_memory_gigabytes_required = 2.4 translates line #$ -l m_mem_free=2.4G SGE job script. sge_memory_gigabytes_required = NULL omits line. sge_cores Optional positive integer length 1, number cores per worker (\"slots\" SGE lingo). sge_cores = 4 translates line #$ -pe smp 4 SGE job script. sge_cores = NULL omits line. sge_gpu Optional integer length 1 number GPUs request worker. sge_gpu = 1 translates line \"#$ -l gpu=1\" SGE job script. sge_gpu = NULL omits line.","code":""},{"path":"/reference/crew_controller_sge.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create a controller with a Sun Grid Engine (SGE) launcher. — crew_controller_sge","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_controller_sge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" Create a controller with a Sun Grid Engine (SGE) launcher. — crew_controller_sge","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { controller <- crew_controller_sge() controller$start() controller$push(name = \"task\", command = sqrt(4)) controller$wait() controller$pop()$result controller$terminate() }"},{"path":"/reference/crew_controller_slurm.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a controller with a SLURM launcher. — crew_controller_slurm","title":" Create a controller with a SLURM launcher. — crew_controller_slurm","text":"Create R6 object submit tasks launch workers SLURM workers.","code":""},{"path":"/reference/crew_controller_slurm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a controller with a SLURM launcher. — crew_controller_slurm","text":"","code":"crew_controller_slurm(   name = NULL,   workers = 1L,   host = NULL,   port = NULL,   tls = crew::crew_tls(mode = \"automatic\"),   tls_enable = NULL,   tls_config = NULL,   seconds_interval = 0.25,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = Inf,   seconds_wall = Inf,   seconds_exit = NULL,   retry_tasks = TRUE,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   launch_max = 5L,   verbose = FALSE,   command_submit = as.character(Sys.which(\"sbatch\")),   command_terminate = as.character(Sys.which(\"scancel\")),   command_delete = NULL,   script_directory = tempdir(),   script_lines = character(0L),   slurm_log_output = \"/dev/null\",   slurm_log_error = \"/dev/null\",   slurm_memory_gigabytes_per_cpu = NULL,   slurm_cpus_per_task = NULL,   slurm_time_minutes = 1440,   slurm_partition = NULL )"},{"path":"/reference/crew_controller_slurm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a controller with a SLURM launcher. — crew_controller_slurm","text":"name Name client object. NULL, name automatically generated. workers Integer, maximum number parallel workers run. host IP address mirai client send receive tasks. NULL, host defaults local IP address. port TCP port listen workers. NULL, available ephemeral port automatically chosen. tls TLS configuration object crew_tls(). tls_enable Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. tls_config Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete, checking mirai::status() seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). seconds_exit Deprecated 2023-09-21 version 0.1.2.9000. longer necessary. retry_tasks TRUE automatically retry task event unexpected worker exit. FALSE give first exit return mirai error code (code number 19). TRUE (default) recommended situations. Use FALSE debugging purposes, e.g. confirm task causing worker run memory crash way. tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals TRUE reset global environment variables tasks, FALSE leave alone. reset_packages TRUE unload packages loaded task (runs task), FALSE leave packages alone. reset_options TRUE reset global options original state task, FALSE otherwise. recommended set reset_options = TRUE reset_packages also TRUE packages sometimes rely options set loading time. garbage_collection TRUE run garbage collection tasks, FALSE skip. launch_max Positive integer length 1, maximum allowed consecutive launch attempts complete tasks. Enforced worker--worker basis. futile launch count resets back 0 worker completes task. recommended set launch_max 0 sometimes workers unproductive perfectly ordinary circumstances. launch_max still small enough detect errors underlying platform. verbose Logical, whether see console output error messages submitting worker. command_submit Character length 1, file path executable submit worker job. command_terminate Character length 1, file path executable terminate worker job. Set \"\" skip manually terminating worker. Unless issue platform, job still exit thanks NNG-powered network programming capabilities mirai. Still, set command_terminate = \"\", assuming extra responsibility manually monitoring jobs cluster manually terminating jobs appropriate. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Character length 1, directory path job scripts. Just job submission, job script created folder. Script base names unique launcher worker, launcher deletes script worker manually terminated. tempdir() default, might work systems. tools::R_user_dir(\"crew.cluster\", = \"cache\") another reasonable choice. script_lines Optional character vector additional lines added job script just common flags. example script_lines = \"module load R\" cluster supports R environment module. slurm_log_output Character length 1, file pattern control locations SLURM worker log files. default, standard output standard error go file. slurm_log_output = \"crew_log_%.txt\" translates line #SBATCH --output=crew_log_%.txt SLURM job script, %replaced job ID worker. default /dev/null omit logs. Set slurm_log_output = NULL omit line job script. slurm_log_error Character length 1, file pattern standard error. slurm_log_error = \"crew_log_%.txt\" translates line #SBATCH --error=crew_log_%.txt SLURM job script, %replaced job ID worker. default /dev/null omit logs. Set slurm_log_error = NULL omit line job script. slurm_memory_gigabytes_per_cpu Positive numeric length 1 gigabytes memory required per CPU. slurm_memory_gigabytes_per_cpu = 2.40123 translates line #SBATCH --mem-per-cpu=2041M SLURM job script. slurm_memory_gigabytes_per_cpu = NULL omits line. slurm_cpus_per_task Optional positive integer length 1, number CPUs worker. slurm_cpus_per_task = 4 translates line #SBATCH --cpus-per-task=4 SLURM job script. slurm_cpus_per_task = NULL omits line. slurm_time_minutes Numeric length 1, number minutes designate wall time crew worker instance SLURM cluster. slurm_time_minutes = 60 translates line #SBATCH --time=60 SLURM job script. slurm_time_minutes = NULL omits line. slurm_partition Character length 1, name SLURM partition create workers . slurm_partition = \"partition1,partition2\" translates line #SBATCH --partition=partition1,partition2 SLURM job script. slurm_partition = NULL omits line.","code":""},{"path":"/reference/crew_controller_slurm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Create a controller with a SLURM launcher. — crew_controller_slurm","text":"WARNING: crew.cluster SLURM plugin experimental actually tested SLURM cluster. Please proceed caution report bugs https://github.com/wlandau/crew.cluster.","code":""},{"path":"/reference/crew_controller_slurm.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create a controller with a SLURM launcher. — crew_controller_slurm","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_controller_slurm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" Create a controller with a SLURM launcher. — crew_controller_slurm","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { controller <- crew_controller_slurm() controller$start() controller$push(name = \"task\", command = sqrt(4)) controller$wait() controller$pop()$result controller$terminate() }"},{"path":"/reference/crew_launcher_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":" Create an abstract cluster launcher object. — crew_launcher_cluster","title":" Create an abstract cluster launcher object. — crew_launcher_cluster","text":"Create R6 abstract cluster launcher object.","code":""},{"path":"/reference/crew_launcher_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create an abstract cluster launcher object. — crew_launcher_cluster","text":"","code":"crew_launcher_cluster(   name = NULL,   seconds_interval = 0.5,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = Inf,   seconds_wall = Inf,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   launch_max = 5L,   tls = crew::crew_tls(mode = \"automatic\"),   verbose = FALSE,   command_submit = \"\",   command_terminate = \"\",   command_delete = NULL,   script_directory = tempdir(),   script_lines = character(0L) )"},{"path":"/reference/crew_launcher_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create an abstract cluster launcher object. — crew_launcher_cluster","text":"name Name launcher. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete, checking mirai::status(). seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals TRUE reset global environment variables tasks, FALSE leave alone. reset_packages TRUE unload packages loaded task (runs task), FALSE leave packages alone. reset_options TRUE reset global options original state task, FALSE otherwise. recommended set reset_options = TRUE reset_packages also TRUE packages sometimes rely options set loading time. garbage_collection TRUE run garbage collection tasks, FALSE skip. launch_max Positive integer length 1, maximum allowed consecutive launch attempts complete tasks. Enforced worker--worker basis. futile launch count resets back 0 worker completes task. recommended set launch_max 0 sometimes workers unproductive perfectly ordinary circumstances. launch_max still small enough detect errors underlying platform. tls TLS configuration object crew_tls(). verbose Logical, whether see console output error messages submitting worker. command_submit Character length 1, file path executable submit worker job. command_terminate Character length 1, file path executable terminate worker job. Set \"\" skip manually terminating worker. Unless issue platform, job still exit thanks NNG-powered network programming capabilities mirai. Still, set command_terminate = \"\", assuming extra responsibility manually monitoring jobs cluster manually terminating jobs appropriate. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Character length 1, directory path job scripts. Just job submission, job script created folder. Script base names unique launcher worker, launcher deletes script worker manually terminated. tempdir() default, might work systems. tools::R_user_dir(\"crew.cluster\", = \"cache\") another reasonable choice. script_lines Optional character vector additional lines added job script just common flags. example script_lines = \"module load R\" cluster supports R environment module.","code":""},{"path":"/reference/crew_launcher_cluster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Create an abstract cluster launcher object. — crew_launcher_cluster","text":"abstract class used develop specific launcher classes specific computing platforms.","code":""},{"path":"/reference/crew_launcher_cluster.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create an abstract cluster launcher object. — crew_launcher_cluster","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_launcher_lsf.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a launcher with LSF workers. — crew_launcher_lsf","title":" Create a launcher with LSF workers. — crew_launcher_lsf","text":"Create R6 object launch maintain workers LSF jobs.","code":""},{"path":"/reference/crew_launcher_lsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a launcher with LSF workers. — crew_launcher_lsf","text":"","code":"crew_launcher_lsf(   name = NULL,   seconds_interval = 0.5,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = Inf,   seconds_wall = Inf,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   launch_max = 5L,   tls = crew::crew_tls(mode = \"automatic\"),   verbose = FALSE,   command_submit = as.character(Sys.which(\"bsub\")),   command_terminate = as.character(Sys.which(\"bkill\")),   command_delete = NULL,   script_directory = tempdir(),   script_lines = character(0L),   lsf_cwd = getwd(),   lsf_log_output = \"/dev/null\",   lsf_log_error = \"/dev/null\",   lsf_memory_gigabytes_limit = NULL,   lsf_memory_gigabytes_required = NULL,   lsf_cores = NULL )"},{"path":"/reference/crew_launcher_lsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a launcher with LSF workers. — crew_launcher_lsf","text":"name Name launcher. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete, checking mirai::status(). seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals TRUE reset global environment variables tasks, FALSE leave alone. reset_packages TRUE unload packages loaded task (runs task), FALSE leave packages alone. reset_options TRUE reset global options original state task, FALSE otherwise. recommended set reset_options = TRUE reset_packages also TRUE packages sometimes rely options set loading time. garbage_collection TRUE run garbage collection tasks, FALSE skip. launch_max Positive integer length 1, maximum allowed consecutive launch attempts complete tasks. Enforced worker--worker basis. futile launch count resets back 0 worker completes task. recommended set launch_max 0 sometimes workers unproductive perfectly ordinary circumstances. launch_max still small enough detect errors underlying platform. tls TLS configuration object crew_tls(). verbose Logical, whether see console output error messages submitting worker. command_submit Character length 1, file path executable submit worker job. command_terminate Character length 1, file path executable terminate worker job. Set \"\" skip manually terminating worker. Unless issue platform, job still exit thanks NNG-powered network programming capabilities mirai. Still, set command_terminate = \"\", assuming extra responsibility manually monitoring jobs cluster manually terminating jobs appropriate. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Character length 1, directory path job scripts. Just job submission, job script created folder. Script base names unique launcher worker, launcher deletes script worker manually terminated. tempdir() default, might work systems. tools::R_user_dir(\"crew.cluster\", = \"cache\") another reasonable choice. script_lines Optional character vector additional lines added job script just common flags. example script_lines = \"module load R\" cluster supports R environment module. lsf_cwd Character length 1, directory launch worker (opposed system default). lsf_cwd = \"/home\" translates line #BSUB -cwd /home LSF job script. lsf_cwd = getwd() default, launches workers current working directory. Set lsf_cwd = NULL omit line job script. lsf_log_output Character length 1, file pattern control locations LSF worker log files. default, standard output standard error go file. lsf_log_output = \"crew_log_%J.log\" translates line #BSUB -o crew_log_%J.log LSF job script, %J replaced job ID worker. default /dev/null omit logs. Set lsf_log_output = NULL omit line job script. lsf_log_error Character length 1, file pattern standard error. lsf_log_error = \"crew_error_%J.err\" translates line #BSUB -e crew_error_%J.err LSF job script, %J replaced job ID worker. default /dev/null omit logs. Set lsf_log_error = NULL omit line job script. lsf_memory_gigabytes_limit Positive numeric length 1 limit gigabytes lsf_memory_gigabytes_limit = 4 translates line #BSUB -M 4G LSF job script. lsf_memory_gigabytes_limit = NULL omits line. lsf_memory_gigabytes_required Positive numeric length 1 memory requirement gigabytes lsf_memory_gigabytes_required = 4 translates line #BSUB -R 'rusage[mem=4G]' LSF job script. lsf_memory_gigabytes_required = NULL omits line. lsf_cores Optional positive integer length 1, number CPU cores worker. lsf_cores = 4 translates line #BSUB -n 4 LSF job script. lsf_cores = NULL omits line.","code":""},{"path":"/reference/crew_launcher_lsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Create a launcher with LSF workers. — crew_launcher_lsf","text":"WARNING: crew.cluster LSF plugin experimental. Please proceed caution report bugs https://github.com/wlandau/crew.cluster. launch LSF worker, launcher creates temporary job script call crew::crew_worker() submits LSF job sbatch. see lines job script advance, use script() method launcher. lines except job name call crew::crew_worker(), inserted last minute time actually launch worker.","code":""},{"path":"/reference/crew_launcher_lsf.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create a launcher with LSF workers. — crew_launcher_lsf","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_launcher_pbs.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a launcher with PBS or TORQUE workers. — crew_launcher_pbs","title":" Create a launcher with PBS or TORQUE workers. — crew_launcher_pbs","text":"Create R6 object launch maintain workers jobs PBS TORQUE cluster.","code":""},{"path":"/reference/crew_launcher_pbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a launcher with PBS or TORQUE workers. — crew_launcher_pbs","text":"","code":"crew_launcher_pbs(   name = NULL,   seconds_interval = 0.5,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = Inf,   seconds_wall = Inf,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   launch_max = 5L,   tls = crew::crew_tls(mode = \"automatic\"),   verbose = FALSE,   command_submit = as.character(Sys.which(\"qsub\")),   command_terminate = as.character(Sys.which(\"qdel\")),   command_delete = NULL,   script_directory = tempdir(),   script_lines = character(0L),   pbs_cwd = TRUE,   pbs_log_output = \"/dev/null\",   pbs_log_error = NULL,   pbs_log_join = TRUE,   pbs_memory_gigabytes_required = NULL,   pbs_cores = NULL,   pbs_walltime_hours = 12 )"},{"path":"/reference/crew_launcher_pbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a launcher with PBS or TORQUE workers. — crew_launcher_pbs","text":"name Name launcher. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete, checking mirai::status(). seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals TRUE reset global environment variables tasks, FALSE leave alone. reset_packages TRUE unload packages loaded task (runs task), FALSE leave packages alone. reset_options TRUE reset global options original state task, FALSE otherwise. recommended set reset_options = TRUE reset_packages also TRUE packages sometimes rely options set loading time. garbage_collection TRUE run garbage collection tasks, FALSE skip. launch_max Positive integer length 1, maximum allowed consecutive launch attempts complete tasks. Enforced worker--worker basis. futile launch count resets back 0 worker completes task. recommended set launch_max 0 sometimes workers unproductive perfectly ordinary circumstances. launch_max still small enough detect errors underlying platform. tls TLS configuration object crew_tls(). verbose Logical, whether see console output error messages submitting worker. command_submit Character length 1, file path executable submit worker job. command_terminate Character length 1, file path executable terminate worker job. Set \"\" skip manually terminating worker. Unless issue platform, job still exit thanks NNG-powered network programming capabilities mirai. Still, set command_terminate = \"\", assuming extra responsibility manually monitoring jobs cluster manually terminating jobs appropriate. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Character length 1, directory path job scripts. Just job submission, job script created folder. Script base names unique launcher worker, launcher deletes script worker manually terminated. tempdir() default, might work systems. tools::R_user_dir(\"crew.cluster\", = \"cache\") another reasonable choice. script_lines Optional character vector additional lines added job script just common flags. example script_lines = \"module load R\" cluster supports R environment module. pbs_cwd Logical length 1, whether set working directory worker working directory launched . pbs_cwd = TRUE translates line cd \"$PBS_O_WORKDIR\" job script. line inserted content script_lines make sure #PBS directives system commands. pbs_cwd = FALSE omits line. pbs_log_output Character length 1, file directory path PBS worker log files standard output. pbs_log_output = \"VALUE\" translates line #PBS -o VALUE PBS job script. default /dev/null omit logs. supply non-/dev/null value, recommended supply directory path trailing slash worker gets set log files. pbs_log_error Character length 1, file directory path PBS worker log files standard error. pbs_log_error = \"VALUE\" translates line #PBS -e VALUE PBS job script. default NULL omits line. supply non-/dev/null value, recommended supply directory path trailing slash worker gets set log files. pbs_log_join Logical, whether join stdout stderr log files together one file. pbs_log_join = TRUE translates line #PBS -j oe PBS job script, pbs_log_join = FALSE equivalent #PBS -j n. pbs_log_join = TRUE, pbs_log_error NULL. pbs_memory_gigabytes_required Optional positive numeric length 1 gigabytes memory required run worker. pbs_memory_gigabytes_required = 2.4 translates line #PBS -l mem=2.4gb PBS job script. pbs_memory_gigabytes_required = NULL omits line. pbs_cores Optional positive integer length 1, number cores per worker (\"slots\" PBS lingo). pbs_cores = 4 translates line #PBS -l ppn=4 PBS job script. pbs_cores = NULL omits line. pbs_walltime_hours Numeric length 1 hours wall time request job. pbs_walltime_hours = 23 translates line #PBS -l walltime=23:00:00 job script. pbs_walltime_hours = NULL omits line.","code":""},{"path":"/reference/crew_launcher_pbs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Create a launcher with PBS or TORQUE workers. — crew_launcher_pbs","text":"WARNING: crew.cluster PBS plugin experimental actually tested PBS cluster. Please proceed caution report bugs https://github.com/wlandau/crew.cluster. launch PBS/TORQUE worker, launcher creates temporary job script call crew::crew_worker() submits PBS job qsub. see lines job script advance, use script() method launcher. lines except job name call crew::crew_worker(), inserted last minute time actually launch worker.","code":""},{"path":"/reference/crew_launcher_pbs.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create a launcher with PBS or TORQUE workers. — crew_launcher_pbs","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_launcher_sge.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a launcher with Sun Grid Engine (SGE) workers. — crew_launcher_sge","title":" Create a launcher with Sun Grid Engine (SGE) workers. — crew_launcher_sge","text":"Create R6 object launch maintain workers Sun Grid Engine (SGE) jobs.","code":""},{"path":"/reference/crew_launcher_sge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a launcher with Sun Grid Engine (SGE) workers. — crew_launcher_sge","text":"","code":"crew_launcher_sge(   name = NULL,   seconds_interval = 0.5,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = Inf,   seconds_wall = Inf,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   launch_max = 5L,   tls = crew::crew_tls(mode = \"automatic\"),   verbose = FALSE,   command_submit = as.character(Sys.which(\"qsub\")),   command_terminate = as.character(Sys.which(\"qdel\")),   command_delete = NULL,   script_directory = tempdir(),   script_lines = character(0L),   sge_cwd = TRUE,   sge_envvars = FALSE,   sge_log_output = \"/dev/null\",   sge_log_error = NULL,   sge_log_join = TRUE,   sge_memory_gigabytes_limit = NULL,   sge_memory_gigabytes_required = NULL,   sge_cores = NULL,   sge_gpu = NULL )"},{"path":"/reference/crew_launcher_sge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a launcher with Sun Grid Engine (SGE) workers. — crew_launcher_sge","text":"name Name launcher. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete, checking mirai::status(). seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals TRUE reset global environment variables tasks, FALSE leave alone. reset_packages TRUE unload packages loaded task (runs task), FALSE leave packages alone. reset_options TRUE reset global options original state task, FALSE otherwise. recommended set reset_options = TRUE reset_packages also TRUE packages sometimes rely options set loading time. garbage_collection TRUE run garbage collection tasks, FALSE skip. launch_max Positive integer length 1, maximum allowed consecutive launch attempts complete tasks. Enforced worker--worker basis. futile launch count resets back 0 worker completes task. recommended set launch_max 0 sometimes workers unproductive perfectly ordinary circumstances. launch_max still small enough detect errors underlying platform. tls TLS configuration object crew_tls(). verbose Logical, whether see console output error messages submitting worker. command_submit Character length 1, file path executable submit worker job. command_terminate Character length 1, file path executable terminate worker job. Set \"\" skip manually terminating worker. Unless issue platform, job still exit thanks NNG-powered network programming capabilities mirai. Still, set command_terminate = \"\", assuming extra responsibility manually monitoring jobs cluster manually terminating jobs appropriate. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Character length 1, directory path job scripts. Just job submission, job script created folder. Script base names unique launcher worker, launcher deletes script worker manually terminated. tempdir() default, might work systems. tools::R_user_dir(\"crew.cluster\", = \"cache\") another reasonable choice. script_lines Optional character vector additional lines added job script just common flags. example script_lines = \"module load R\" cluster supports R environment module. sge_cwd Logical length 1, whether launch worker current working directory (opposed user home directory). sge_cwd = TRUE translates line #$ -cwd SGE job script. sge_cwd = FALSE omits line. sge_envvars Logical length 1, whether forward environment variables current session SGE worker. sge_envvars = TRUE translates line #$ -V SGE job script. sge_envvars = FALSE omits line. sge_log_output Character length 1, file directory path SGE worker log files standard output. sge_log_output = \"VALUE\" translates line #$ -o VALUE SGE job script. default /dev/null omit logs. supply non-/dev/null value, recommended supply directory path trailing slash worker gets set log files. sge_log_error Character length 1, file directory path SGE worker log files standard error. sge_log_error = \"VALUE\" translates line #$ -e VALUE SGE job script. default NULL omits line. supply non-/dev/null value, recommended supply directory path trailing slash worker gets set log files. sge_log_join Logical, whether join stdout stderr log files together one file. sge_log_join = TRUE translates line #$ -j y SGE job script, sge_log_join = FALSE equivalent #$ -j n. sge_log_join = TRUE, sge_log_error NULL. sge_memory_gigabytes_limit Optional numeric length 1 maximum number gigabytes memory worker allowed consume. worker consumes level memory, SGE terminate . sge_memory_gigabytes_limit = 5.7\" translates line \"#$ -l h_rss=5.7G\" SGE job script. sge_memory_gigabytes_limit = NULL omits line. sge_memory_gigabytes_required Optional positive numeric length 1 gigabytes memory required run worker. sge_memory_gigabytes_required = 2.4 translates line #$ -l m_mem_free=2.4G SGE job script. sge_memory_gigabytes_required = NULL omits line. sge_cores Optional positive integer length 1, number cores per worker (\"slots\" SGE lingo). sge_cores = 4 translates line #$ -pe smp 4 SGE job script. sge_cores = NULL omits line. sge_gpu Optional integer length 1 number GPUs request worker. sge_gpu = 1 translates line \"#$ -l gpu=1\" SGE job script. sge_gpu = NULL omits line.","code":""},{"path":"/reference/crew_launcher_sge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Create a launcher with Sun Grid Engine (SGE) workers. — crew_launcher_sge","text":"launch Sun Grid Engine (SGE) worker, launcher creates temporary job script call crew::crew_worker() submits SGE job qsub. see lines job script advance, use script() method launcher. lines except job name call crew::crew_worker(), inserted last minute time actually launch worker.","code":""},{"path":"/reference/crew_launcher_sge.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create a launcher with Sun Grid Engine (SGE) workers. — crew_launcher_sge","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_launcher_slurm.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a launcher with SLURM workers. — crew_launcher_slurm","title":" Create a launcher with SLURM workers. — crew_launcher_slurm","text":"Create R6 object launch maintain workers SLURM jobs.","code":""},{"path":"/reference/crew_launcher_slurm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a launcher with SLURM workers. — crew_launcher_slurm","text":"","code":"crew_launcher_slurm(   name = NULL,   seconds_interval = 0.5,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = Inf,   seconds_wall = Inf,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   launch_max = 5L,   tls = crew::crew_tls(mode = \"automatic\"),   verbose = FALSE,   command_submit = as.character(Sys.which(\"sbatch\")),   command_terminate = as.character(Sys.which(\"scancel\")),   command_delete = NULL,   script_directory = tempdir(),   script_lines = character(0L),   slurm_log_output = \"/dev/null\",   slurm_log_error = \"/dev/null\",   slurm_memory_gigabytes_per_cpu = NULL,   slurm_cpus_per_task = NULL,   slurm_time_minutes = 1440,   slurm_partition = NULL )"},{"path":"/reference/crew_launcher_slurm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a launcher with SLURM workers. — crew_launcher_slurm","text":"name Name launcher. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete, checking mirai::status(). seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals TRUE reset global environment variables tasks, FALSE leave alone. reset_packages TRUE unload packages loaded task (runs task), FALSE leave packages alone. reset_options TRUE reset global options original state task, FALSE otherwise. recommended set reset_options = TRUE reset_packages also TRUE packages sometimes rely options set loading time. garbage_collection TRUE run garbage collection tasks, FALSE skip. launch_max Positive integer length 1, maximum allowed consecutive launch attempts complete tasks. Enforced worker--worker basis. futile launch count resets back 0 worker completes task. recommended set launch_max 0 sometimes workers unproductive perfectly ordinary circumstances. launch_max still small enough detect errors underlying platform. tls TLS configuration object crew_tls(). verbose Logical, whether see console output error messages submitting worker. command_submit Character length 1, file path executable submit worker job. command_terminate Character length 1, file path executable terminate worker job. Set \"\" skip manually terminating worker. Unless issue platform, job still exit thanks NNG-powered network programming capabilities mirai. Still, set command_terminate = \"\", assuming extra responsibility manually monitoring jobs cluster manually terminating jobs appropriate. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Character length 1, directory path job scripts. Just job submission, job script created folder. Script base names unique launcher worker, launcher deletes script worker manually terminated. tempdir() default, might work systems. tools::R_user_dir(\"crew.cluster\", = \"cache\") another reasonable choice. script_lines Optional character vector additional lines added job script just common flags. example script_lines = \"module load R\" cluster supports R environment module. slurm_log_output Character length 1, file pattern control locations SLURM worker log files. default, standard output standard error go file. slurm_log_output = \"crew_log_%.txt\" translates line #SBATCH --output=crew_log_%.txt SLURM job script, %replaced job ID worker. default /dev/null omit logs. Set slurm_log_output = NULL omit line job script. slurm_log_error Character length 1, file pattern standard error. slurm_log_error = \"crew_log_%.txt\" translates line #SBATCH --error=crew_log_%.txt SLURM job script, %replaced job ID worker. default /dev/null omit logs. Set slurm_log_error = NULL omit line job script. slurm_memory_gigabytes_per_cpu Positive numeric length 1 gigabytes memory required per CPU. slurm_memory_gigabytes_per_cpu = 2.40123 translates line #SBATCH --mem-per-cpu=2041M SLURM job script. slurm_memory_gigabytes_per_cpu = NULL omits line. slurm_cpus_per_task Optional positive integer length 1, number CPUs worker. slurm_cpus_per_task = 4 translates line #SBATCH --cpus-per-task=4 SLURM job script. slurm_cpus_per_task = NULL omits line. slurm_time_minutes Numeric length 1, number minutes designate wall time crew worker instance SLURM cluster. slurm_time_minutes = 60 translates line #SBATCH --time=60 SLURM job script. slurm_time_minutes = NULL omits line. slurm_partition Character length 1, name SLURM partition create workers . slurm_partition = \"partition1,partition2\" translates line #SBATCH --partition=partition1,partition2 SLURM job script. slurm_partition = NULL omits line.","code":""},{"path":"/reference/crew_launcher_slurm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Create a launcher with SLURM workers. — crew_launcher_slurm","text":"WARNING: crew.cluster SLURM plugin experimental actually tested SLURM cluster. Please proceed caution report bugs https://github.com/wlandau/crew.cluster. launch SLURM worker, launcher creates temporary job script call crew::crew_worker() submits SLURM job sbatch. see lines job script advance, use script() method launcher. lines except job name call crew::crew_worker(), inserted last minute time actually launch worker.","code":""},{"path":"/reference/crew_launcher_slurm.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create a launcher with SLURM workers. — crew_launcher_slurm","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_monitor_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":" Create an abstract cluster monitor object. — crew_monitor_cluster","title":" Create an abstract cluster monitor object. — crew_monitor_cluster","text":"Create abstract cluster monitor R6 object.","code":""},{"path":"/reference/crew_monitor_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create an abstract cluster monitor object. — crew_monitor_cluster","text":"","code":"crew_monitor_cluster(   verbose = TRUE,   command_list = as.character(Sys.which(\"qstat\")),   command_terminate = as.character(Sys.which(\"qdel\")) )"},{"path":"/reference/crew_monitor_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create an abstract cluster monitor object. — crew_monitor_cluster","text":"verbose Logical, whether see console output error messages submitting worker. command_list Character length 1, file path executable list jobs. command_terminate Character length 1, file path executable terminate worker job. Set \"\" skip manually terminating worker. Unless issue platform, job still exit thanks NNG-powered network programming capabilities mirai. Still, set command_terminate = \"\", assuming extra responsibility manually monitoring jobs cluster manually terminating jobs appropriate.","code":""},{"path":[]},{"path":"/reference/crew_monitor_sge.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a SGE monitor object. — crew_monitor_sge","title":" Create a SGE monitor object. — crew_monitor_sge","text":"Create R6 object monitor SGE cluster jobs.","code":""},{"path":"/reference/crew_monitor_sge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a SGE monitor object. — crew_monitor_sge","text":"","code":"crew_monitor_sge(   verbose = TRUE,   command_list = as.character(Sys.which(\"qstat\")),   command_terminate = as.character(Sys.which(\"qdel\")) )"},{"path":"/reference/crew_monitor_sge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a SGE monitor object. — crew_monitor_sge","text":"verbose Logical, whether see console output error messages submitting worker. command_list Character length 1, file path executable list jobs. command_terminate Character length 1, file path executable terminate worker job. Set \"\" skip manually terminating worker. Unless issue platform, job still exit thanks NNG-powered network programming capabilities mirai. Still, set command_terminate = \"\", assuming extra responsibility manually monitoring jobs cluster manually terminating jobs appropriate.","code":""},{"path":[]},{"path":"/reference/crew_monitor_slurm.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a SLURM monitor object. — crew_monitor_slurm","title":" Create a SLURM monitor object. — crew_monitor_slurm","text":"Create R6 object monitor SLURM cluster jobs.","code":""},{"path":"/reference/crew_monitor_slurm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a SLURM monitor object. — crew_monitor_slurm","text":"","code":"crew_monitor_slurm(   verbose = TRUE,   command_list = as.character(Sys.which(\"squeue\")),   command_terminate = as.character(Sys.which(\"scancel\")) )"},{"path":"/reference/crew_monitor_slurm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a SLURM monitor object. — crew_monitor_slurm","text":"verbose Logical, whether see console output error messages submitting worker. command_list Character length 1, file path executable list jobs. command_terminate Character length 1, file path executable terminate worker job. Set \"\" skip manually terminating worker. Unless issue platform, job still exit thanks NNG-powered network programming capabilities mirai. Still, set command_terminate = \"\", assuming extra responsibility manually monitoring jobs cluster manually terminating jobs appropriate.","code":""},{"path":[]},{"path":[]},{"path":"/news/index.html","id":"crewcluster-032","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.3.2","title":"crew.cluster 0.3.2","text":"Add retry_tasks argument.","code":""},{"path":"/news/index.html","id":"crewcluster-031","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.3.1","title":"crew.cluster 0.3.1","text":"CRAN release: 2024-04-24 Add SLURM monitor (#32, @brendanf).","code":""},{"path":"/news/index.html","id":"crewcluster-030","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.3.0","title":"crew.cluster 0.3.0","text":"CRAN release: 2024-02-08 Create abstract monitor class cluster-specific monitor classes inherit (#32). Require crew >= 0.8.0. Raise seconds_timeout 60 across controllers.","code":""},{"path":"/news/index.html","id":"crewcluster-020","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.2.0","title":"crew.cluster 0.2.0","text":"CRAN release: 2024-01-08 Re-enable unit tests. Require crew >= 0.7.0. Add “monitor” class SGE clusters conveniently list terminate jobs. Deprecate command_delete favor command_terminate.","code":""},{"path":"/news/index.html","id":"crewcluster-014","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.1.4","title":"crew.cluster 0.1.4","text":"CRAN release: 2023-12-10 Refactor methods development crew. Encapsulate non-function R6 members inside private list. Encapsulate functions launch/termination commands inside R6 private list.","code":""},{"path":"/news/index.html","id":"crewcluster-013","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.1.3","title":"crew.cluster 0.1.3","text":"CRAN release: 2023-10-17 Deprecate seconds_exit (https://github.com/wlandau/crew/issues/125, @shikokuchuo). Deprecate seconds_interval (https://github.com/wlandau/crew/issues/131). Add new slurm_partition argument SLURM controller launcher (#24, @kkmann). Turn automatic TLS encryption default.","code":""},{"path":"/news/index.html","id":"crewcluster-012","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.1.2","title":"crew.cluster 0.1.2","text":"CRAN release: 2023-09-20 Require crew >= 0.5.0. Add new slurm_time_minutes SLURM wall time (#1, @cfljam). Enable TLS. Use MB format memory SLURM launcher (#22, @kendonB). Use launch_max crew_tls() crew 0.5.0.","code":""},{"path":"/news/index.html","id":"crewcluster-011","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.1.1","title":"crew.cluster 0.1.1","text":"CRAN release: 2023-06-15 Align breaking changes crew 0.3.0. Increase seconds_launch 86400 (1 day).","code":""},{"path":"/news/index.html","id":"crewcluster-010","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.1.0","title":"crew.cluster 0.1.0","text":"CRAN release: 2023-05-19 Submit workers asynchronously (#2). Use system2() instead processx submit workers (#2). Add verbose argument SGE launcher optionally print system2() stdout stderr. Implement SLURM PBS/TORQUE launchers (#1, #5, #6). Create abstract cluster launcher class combine common elements cluster launchers. Add script_directory argument customize location job scripts (#3, @mglev1n). Implement LSF launcher (#4, @mglev1n).","code":""},{"path":"/news/index.html","id":"crewcluster-002","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.0.2","title":"crew.cluster 0.0.2","text":"CRAN release: 2023-04-25 Fix author spelling DESCRIPTION file.","code":""},{"path":"/news/index.html","id":"crewcluster-001","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.0.1","title":"crew.cluster 0.0.1","text":"First version.","code":""}]
