[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement .landau@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Development community effort, welcome participation.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing","text":"Please note crew.cluster project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/CONTRIBUTING.html","id":"discussions","dir":"","previous_headings":"","what":"Discussions","title":"Contributing","text":"https://github.com/wlandau/crew.cluster/discussions, can post general questions, brainstorm ideas, ask help.","code":""},{"path":"/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing","text":"https://github.com/wlandau/crew.cluster/issues bug reports, performance issues, maintenance tasks, feature requests. post, please abide following guidelines. posting new issue discussion topic, please take moment search existing similar threads order avoid duplication. bug reports: can, please install latest GitHub version crew.cluster (.e. remotes::install_github(\"wlandau/crew.cluster\")) verify issue still persists. Describe issue prose clearly concisely possible. Runnable: post enough R code data onlooker can create error computer. Minimal: reduce runtime wherever possible remove complicated details irrelevant issue hand. Readable: format code according tidyverse style guide.","code":""},{"path":"/CONTRIBUTING.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Contributing","text":"External code contributions extremely helpful right circumstances. recommended steps. Prior contribution, please propose idea discussion topic issue thread maintainer can define intent scope work. Fork repository. Follow GitHub flow create new branch, add commits, open pull request. Discuss code maintainer pull request thread. everything looks good, maintainer merge code project. Please also follow additional guidelines. Respect architecture reasoning package. Depending scope work, may want read design documents (package vignettes). possible, keep contributions small enough easily review manually. okay split work multiple pull requests. Format code according tidyverse style guide check formatting lint_package() function lintr package. new features functionality, add tests tests. Tests can automated go tests/testthat/. Tests automated go tests/interactive/. features affecting performance, good practice add profiling studies tests/performance/. Check code coverage covr::package_coverage(). Automated tests cover new changed functionality pull request. Run overall package checks devtools::check() goodpractice::gp() Describe contribution project’s NEWS.md file. sure mention relevent GitHub issue numbers GitHub name done existing news entries. feel contribution substantial enough official author contributor status, please add Authors@R field DESCRIPTION file.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Eli Lilly Company Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/PULL_REQUEST_TEMPLATE.html","id":null,"dir":"","previous_headings":"","what":"Prework","title":"Prework","text":"understand agree Contributor Code Conduct. already submitted discussion topic issue discuss idea maintainer.","code":""},{"path":"/PULL_REQUEST_TEMPLATE.html","id":"related-github-issues-and-pull-requests","dir":"","previous_headings":"","what":"Related GitHub issues and pull requests","title":"Prework","text":"Ref: #","code":""},{"path":"/PULL_REQUEST_TEMPLATE.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Prework","text":"Please explain purpose scope contribution.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"William Michael Landau. Author, maintainer. Michael Gilbert Levin. Author. Brendan Furneaux. Author. Eli Lilly Company. Copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Landau WM, Levin MG, Furneaux B (2025). crew.cluster: Crew Launcher Plugins Traditional High-Performance Computing Clusters. R package version 0.3.8.9000, https://wlandau.github.io/crew.cluster/.","code":"@Manual{,   title = {crew.cluster: Crew Launcher Plugins for Traditional High-Performance Computing Clusters},   author = {William Michael Landau and Michael Gilbert Levin and Brendan Furneaux},   year = {2025},   note = {R package version 0.3.8.9000},   url = {https://wlandau.github.io/crew.cluster/}, }"},{"path":"/index.html","id":"crewcluster-crew-launcher-plugins-for-traditional-high-performance-computing-clusters-","dir":"","previous_headings":"","what":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"computationally demanding analysis projects, statisticians data scientists asynchronously deploy long-running tasks distributed systems, ranging traditional clusters cloud services. crew.cluster package extends mirai-powered ‘crew’ package worker launcher plugins traditional high-performance computing systems. Inspiration also comes packages mirai, future, rrq, clustermq, batchtools.","code":""},{"path":[]},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"Please see https://wlandau.github.io/crew.cluster/ documentation, including full function reference usage tutorial.","code":""},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"First, create controller object appropriate platform. example, launch workers Sun Grid Engine (SGE) cluster, use crew_controller_sge(). point, usage exactly basic crew. push() method submits tasks auto-scales SGE workers meet demand. pop() method retrieves available tasks. Remember terminate controller done.","code":"library(crew.cluster) controller <- crew_controller_sge(   name = \"my_workflow\", # for informative job names   workers = 16,   tasks_max = 2, # to avoid reaching wall time limits   seconds_idle = 10, # to release resources when they are not needed,   # Try 16 GB memory first, then use 32 GB to retry if the worker crashes,   # then 64 GB for all subsequent retries after failure. Go back to 16 GB   # if the worker completes all its tasks before exiting.   sge_memory_gigabytes_required = c(16, 32, 64),   script_lines = \"module load R\" # if R is an environment module ) controller$start() controller$push(name = \"do work\", command = do_work()) controller$pop() #> # A tibble: 1 × 11 #>   name         command result seconds   seed error trace warni…¹ launc…² worker insta…³ #>   <chr>        <chr>   <list>   <dbl>  <int> <chr> <chr> <chr>   <chr>    <int> <chr>   #> 1 do work   … do_work… <int>        0 1.56e8 NA    NA    NA      79e71c…      1 7686b2… #> # … with abbreviated variable names ¹​warnings, ²​launcher, ³​instance controller$terminate()"},{"path":"/index.html","id":"monitoring","dir":"","previous_headings":"","what":"Monitoring","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"manage resource usage, may choose list manually terminate cluster jobs using crew_monitor_sge() supported monitors. Example SGE: monitor$terminate(= TRUE) terminates SGE jobs, regardless whether crew.cluster created .","code":"monitor <- crew_monitor_sge() job_list <- monitor$jobs() job_list #> # A tibble: 2 × 9 #>   job_number prio    name    owner state start_time queue_name jclass_name slots #>   <chr>      <chr>   <chr>   <chr> <chr> <chr>      <chr>      <lgl>       <chr> #> 1 131853812  0.05000 crew-m… USER… r     2024-01-0… all.norma… NA          1     #> 2 131853813  0.05000 crew-m… USER… r     2024-01-0… all.norma… NA          1 monitor$terminate(jobs = job_list$job_number) #> USER has registered the job 131853812 for deletion #> USER has registered the job 131853813 for deletion monitor$jobs() #> data frame with 0 columns and 0 rows"},{"path":"/index.html","id":"tips","dir":"","previous_headings":"","what":"Tips","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"crew.cluster submits jobs local network using system calls resource manager (e.g SGE SLURM). Please invoke crew.cluster node cluster, either login node (head node) compute node. clusters install software like R versioned environment modules. likely, need call module load R (module load R/x.y.z specific version) order use cluster. crew.cluster, likely need supply \"module load R\" similar script_lines argument e.g. crew_controller_sge().","code":""},{"path":"/index.html","id":"risks","dir":"","previous_headings":"","what":"Risks","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"risks crew.cluster crew, plus risks traditional high-performance computing environments. distributed systems typically operate inside firewall trust local network. responsibility assess security systems use crew.cluster safe manner. addition, crew.cluster automatically launches jobs cluster scheduler, may always able terminate leftover jobs. responsibility monitor jobs manually terminate jobs crew.cluster may able .","code":""},{"path":"/index.html","id":"thanks","dir":"","previous_headings":"","what":"Thanks","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"Charlie Gao created mirai nanonext graciously accommodated complicated demanding feature requests made crew ecosystem possible. Thanks Michael Schubert sharing template files clustermq permissive Apache License 2.0. scripts helped construct launcher plugins clusters direct access possible. See LICENSE.note file package.","code":""},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"Please note crew project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Crew Launcher Plugins for Traditional High-Performance Computing Clusters","text":"","code":"citation(\"crew.cluster\")"},{"path":"/reference/crew.cluster-package.html","id":null,"dir":"Reference","previous_headings":"","what":"crew.cluster: crew launcher plugins for traditional high-performance computing clusters — crew.cluster-package","title":"crew.cluster: crew launcher plugins for traditional high-performance computing clusters — crew.cluster-package","text":"computationally demanding analysis projects, statisticians data scientists asynchronously deploy long-running tasks distributed systems, ranging traditional clusters cloud services. crew.cluster package extends mirai-powered crew package worker launcher plugins traditional high-performance computing systems. Inspiration also comes packages mirai, future, rrq, clustermq, batchtools.","code":""},{"path":"/reference/crew.cluster-package.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":"crew.cluster: crew launcher plugins for traditional high-performance computing clusters — crew.cluster-package","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":" Abstract cluster launcher class — crew_class_launcher_cluster","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"R6 class help develop specific cluster launcher plugins.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"See crew_launcher_cluster().","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_class_launcher_cluster.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"crew::crew_class_launcher -> crew_class_launcher_cluster","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"options_cluster See crew_launcher_cluster().","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"crew::crew_class_launcher$call() crew::crew_class_launcher$crashes() crew::crew_class_launcher$launch() crew::crew_class_launcher$poll() crew::crew_class_launcher$resolve() crew::crew_class_launcher$scale() crew::crew_class_launcher$set_name() crew::crew_class_launcher$settings() crew::crew_class_launcher$start() crew::crew_class_launcher$terminate() crew::crew_class_launcher$terminate_workers() crew::crew_class_launcher$update()","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"crew_class_launcher_cluster$new() crew_class_launcher_cluster$validate() crew_class_launcher_cluster$launch_worker() crew_class_launcher_cluster$terminate_worker()","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"Abstract launcher constructor.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"","code":"crew_class_launcher_cluster$new(   name = NULL,   workers = NULL,   seconds_interval = NULL,   seconds_timeout = NULL,   seconds_launch = NULL,   seconds_idle = NULL,   seconds_wall = NULL,   tasks_max = NULL,   tasks_timers = NULL,   reset_globals = NULL,   reset_packages = NULL,   reset_options = NULL,   garbage_collection = NULL,   tls = NULL,   r_arguments = NULL,   options_metrics = NULL,   options_cluster = NULL )"},{"path":"/reference/crew_class_launcher_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"name See crew_launcher_cluster(). workers See crew_launcher_cluster(). seconds_interval See crew_launcher_cluster(). seconds_timeout See crew_launcher_cluster(). seconds_launch See crew_launcher_cluster(). seconds_idle See crew_launcher_cluster(). seconds_wall See crew_launcher_cluster(). tasks_max See crew_launcher_cluster(). tasks_timers See crew_launcher_cluster(). reset_globals See crew_launcher_cluster(). reset_packages See crew_launcher_cluster(). reset_options See crew_launcher_cluster(). garbage_collection See crew_launcher_cluster(). tls See crew_launcher_cluster(). r_arguments See crew_launcher_cluster(). options_metrics See crew_launcher_cluster(). options_cluster See crew_launcher_cluster().","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"abstract launcher object.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"Validate launcher.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"","code":"crew_class_launcher_cluster$validate()"},{"path":"/reference/crew_class_launcher_cluster.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"NULL (invisibly). Throws error field invalid.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"method-launch-worker-","dir":"Reference","previous_headings":"","what":"Method launch_worker()","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"Launch local process worker dial socket.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"","code":"crew_class_launcher_cluster$launch_worker(   call,   name,   launcher,   worker,   instance = NULL )"},{"path":"/reference/crew_class_launcher_cluster.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"call Character string, namespaced call crew::crew_worker() run worker accept tasks. name Character string, informative worker name. launcher Character string, name launcher. worker Character string, name worker instance. instance Deprecated crew.cluster","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"call argument R code run initiate worker.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"handle object allow termination worker later .","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"method-terminate-worker-","dir":"Reference","previous_headings":"","what":"Method terminate_worker()","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"Terminate local process worker.","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"","code":"crew_class_launcher_cluster$terminate_worker(handle)"},{"path":"/reference/crew_class_launcher_cluster.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"handle process handle object previously returned launch_worker().","code":""},{"path":"/reference/crew_class_launcher_cluster.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":" Abstract cluster launcher class — crew_class_launcher_cluster","text":"NULL (invisibly).","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":null,"dir":"Reference","previous_headings":"","what":" LSF launcher class — crew_class_launcher_lsf","title":" LSF launcher class — crew_class_launcher_lsf","text":"R6 class launch manage LSF workers.","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" LSF launcher class — crew_class_launcher_lsf","text":"See crew_launcher_lsf().","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" LSF launcher class — crew_class_launcher_lsf","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_class_launcher_lsf.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":" LSF launcher class — crew_class_launcher_lsf","text":"crew::crew_class_launcher -> crew.cluster::crew_class_launcher_cluster -> crew_class_launcher_lsf","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":" LSF launcher class — crew_class_launcher_lsf","text":"crew::crew_class_launcher$call() crew::crew_class_launcher$crashes() crew::crew_class_launcher$launch() crew::crew_class_launcher$poll() crew::crew_class_launcher$resolve() crew::crew_class_launcher$scale() crew::crew_class_launcher$set_name() crew::crew_class_launcher$settings() crew::crew_class_launcher$start() crew::crew_class_launcher$terminate() crew::crew_class_launcher$terminate_workers() crew::crew_class_launcher$update() crew.cluster::crew_class_launcher_cluster$initialize() crew.cluster::crew_class_launcher_cluster$launch_worker() crew.cluster::crew_class_launcher_cluster$terminate_worker()","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":" LSF launcher class — crew_class_launcher_lsf","text":"crew_class_launcher_lsf$validate() crew_class_launcher_lsf$script()","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":" LSF launcher class — crew_class_launcher_lsf","text":"Validate launcher.","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":" LSF launcher class — crew_class_launcher_lsf","text":"","code":"crew_class_launcher_lsf$validate()"},{"path":"/reference/crew_class_launcher_lsf.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":" LSF launcher class — crew_class_launcher_lsf","text":"NULL (invisibly). Throws error field invalid.","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"method-script-","dir":"Reference","previous_headings":"","what":"Method script()","title":" LSF launcher class — crew_class_launcher_lsf","text":"Generate job script.","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":" LSF launcher class — crew_class_launcher_lsf","text":"","code":"crew_class_launcher_lsf$script(name)"},{"path":"/reference/crew_class_launcher_lsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" LSF launcher class — crew_class_launcher_lsf","text":"name Character length 1, name job. inspection purposes, can supply mock job name.","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":" LSF launcher class — crew_class_launcher_lsf","text":"Includes everything except worker-instance-specific job name worker-instance-specific call crew::crew_worker(), get inserted bottom script launch time.","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":" LSF launcher class — crew_class_launcher_lsf","text":"Character vector lines job script.","code":""},{"path":"/reference/crew_class_launcher_lsf.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":" LSF launcher class — crew_class_launcher_lsf","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { launcher <- crew_launcher_lsf(   lsf_cwd = getwd(),   lsf_log_output = \"log_file_%J.log\",   lsf_log_error = NULL,   lsf_memory_gigabytes_limit = 4 ) launcher$script(name = \"my_job_name\") }"},{"path":"/reference/crew_class_launcher_lsf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" LSF launcher class — crew_class_launcher_lsf","text":"","code":"## ------------------------------------------------ ## Method `crew_class_launcher_lsf$script` ## ------------------------------------------------  if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { launcher <- crew_launcher_lsf(   lsf_cwd = getwd(),   lsf_log_output = \"log_file_%J.log\",   lsf_log_error = NULL,   lsf_memory_gigabytes_limit = 4 ) launcher$script(name = \"my_job_name\") }"},{"path":"/reference/crew_class_launcher_pbs.html","id":null,"dir":"Reference","previous_headings":"","what":" PBS/TORQUE launcher class — crew_class_launcher_pbs","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"R6 class launch manage PBS/TORQUE workers.","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"See crew_launcher_pbs().","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_class_launcher_pbs.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"crew::crew_class_launcher -> crew.cluster::crew_class_launcher_cluster -> crew_class_launcher_pbs","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"crew::crew_class_launcher$call() crew::crew_class_launcher$crashes() crew::crew_class_launcher$launch() crew::crew_class_launcher$poll() crew::crew_class_launcher$resolve() crew::crew_class_launcher$scale() crew::crew_class_launcher$set_name() crew::crew_class_launcher$settings() crew::crew_class_launcher$start() crew::crew_class_launcher$terminate() crew::crew_class_launcher$terminate_workers() crew::crew_class_launcher$update() crew.cluster::crew_class_launcher_cluster$initialize() crew.cluster::crew_class_launcher_cluster$launch_worker() crew.cluster::crew_class_launcher_cluster$terminate_worker()","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"crew_class_launcher_pbs$validate() crew_class_launcher_pbs$script()","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"Validate launcher.","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"","code":"crew_class_launcher_pbs$validate()"},{"path":"/reference/crew_class_launcher_pbs.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"NULL (invisibly). Throws error field invalid.","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"method-script-","dir":"Reference","previous_headings":"","what":"Method script()","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"Generate job script.","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"","code":"crew_class_launcher_pbs$script(name)"},{"path":"/reference/crew_class_launcher_pbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"name Character length 1, name job. inspection purposes, can supply mock job name.","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"Includes everything except worker-instance-specific job name worker-instance-specific call crew::crew_worker(), get inserted bottom script launch time.","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"Character vector lines job script.","code":""},{"path":"/reference/crew_class_launcher_pbs.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { launcher <- crew_launcher_pbs(   pbs_cores = 2,   pbs_memory_gigabytes_required = 4 ) launcher$script(name = \"my_job_name\") }"},{"path":"/reference/crew_class_launcher_pbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" PBS/TORQUE launcher class — crew_class_launcher_pbs","text":"","code":"## ------------------------------------------------ ## Method `crew_class_launcher_pbs$script` ## ------------------------------------------------  if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { launcher <- crew_launcher_pbs(   pbs_cores = 2,   pbs_memory_gigabytes_required = 4 ) launcher$script(name = \"my_job_name\") }"},{"path":"/reference/crew_class_launcher_sge.html","id":null,"dir":"Reference","previous_headings":"","what":" SGE launcher class — crew_class_launcher_sge","title":" SGE launcher class — crew_class_launcher_sge","text":"R6 class launch manage SGE workers.","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" SGE launcher class — crew_class_launcher_sge","text":"See crew_launcher_sge().","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" SGE launcher class — crew_class_launcher_sge","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_class_launcher_sge.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":" SGE launcher class — crew_class_launcher_sge","text":"crew::crew_class_launcher -> crew.cluster::crew_class_launcher_cluster -> crew_class_launcher_sge","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":" SGE launcher class — crew_class_launcher_sge","text":"crew::crew_class_launcher$call() crew::crew_class_launcher$crashes() crew::crew_class_launcher$launch() crew::crew_class_launcher$poll() crew::crew_class_launcher$resolve() crew::crew_class_launcher$scale() crew::crew_class_launcher$set_name() crew::crew_class_launcher$settings() crew::crew_class_launcher$start() crew::crew_class_launcher$terminate() crew::crew_class_launcher$terminate_workers() crew::crew_class_launcher$update() crew.cluster::crew_class_launcher_cluster$initialize() crew.cluster::crew_class_launcher_cluster$launch_worker() crew.cluster::crew_class_launcher_cluster$terminate_worker()","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":" SGE launcher class — crew_class_launcher_sge","text":"crew_class_launcher_sge$validate() crew_class_launcher_sge$script()","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":" SGE launcher class — crew_class_launcher_sge","text":"Validate launcher.","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":" SGE launcher class — crew_class_launcher_sge","text":"","code":"crew_class_launcher_sge$validate()"},{"path":"/reference/crew_class_launcher_sge.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":" SGE launcher class — crew_class_launcher_sge","text":"NULL (invisibly). Throws error field invalid.","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"method-script-","dir":"Reference","previous_headings":"","what":"Method script()","title":" SGE launcher class — crew_class_launcher_sge","text":"Generate job script.","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":" SGE launcher class — crew_class_launcher_sge","text":"","code":"crew_class_launcher_sge$script(name)"},{"path":"/reference/crew_class_launcher_sge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" SGE launcher class — crew_class_launcher_sge","text":"name Character length 1, name job. inspection purposes, can supply mock job name.","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":" SGE launcher class — crew_class_launcher_sge","text":"Includes everything except worker-instance-specific job name worker-instance-specific call crew::crew_worker(), get inserted bottom script launch time.","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":" SGE launcher class — crew_class_launcher_sge","text":"Character vector lines job script.","code":""},{"path":"/reference/crew_class_launcher_sge.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":" SGE launcher class — crew_class_launcher_sge","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { launcher <- crew_launcher_sge(   sge_cores = 2,   sge_memory_gigabytes_required = 4 ) launcher$script(name = \"my_job_name\") }"},{"path":"/reference/crew_class_launcher_sge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" SGE launcher class — crew_class_launcher_sge","text":"","code":"## ------------------------------------------------ ## Method `crew_class_launcher_sge$script` ## ------------------------------------------------  if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { launcher <- crew_launcher_sge(   sge_cores = 2,   sge_memory_gigabytes_required = 4 ) launcher$script(name = \"my_job_name\") }"},{"path":"/reference/crew_class_launcher_slurm.html","id":null,"dir":"Reference","previous_headings":"","what":" SLURM launcher class — crew_class_launcher_slurm","title":" SLURM launcher class — crew_class_launcher_slurm","text":"R6 class launch manage SLURM workers.","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" SLURM launcher class — crew_class_launcher_slurm","text":"See crew_launcher_slurm().","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" SLURM launcher class — crew_class_launcher_slurm","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_class_launcher_slurm.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":" SLURM launcher class — crew_class_launcher_slurm","text":"crew::crew_class_launcher -> crew.cluster::crew_class_launcher_cluster -> crew_class_launcher_slurm","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":" SLURM launcher class — crew_class_launcher_slurm","text":"crew::crew_class_launcher$call() crew::crew_class_launcher$crashes() crew::crew_class_launcher$launch() crew::crew_class_launcher$poll() crew::crew_class_launcher$resolve() crew::crew_class_launcher$scale() crew::crew_class_launcher$set_name() crew::crew_class_launcher$settings() crew::crew_class_launcher$start() crew::crew_class_launcher$terminate() crew::crew_class_launcher$terminate_workers() crew::crew_class_launcher$update() crew.cluster::crew_class_launcher_cluster$initialize() crew.cluster::crew_class_launcher_cluster$launch_worker() crew.cluster::crew_class_launcher_cluster$terminate_worker()","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":" SLURM launcher class — crew_class_launcher_slurm","text":"crew_class_launcher_slurm$validate() crew_class_launcher_slurm$script()","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":" SLURM launcher class — crew_class_launcher_slurm","text":"Validate launcher.","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":" SLURM launcher class — crew_class_launcher_slurm","text":"","code":"crew_class_launcher_slurm$validate()"},{"path":"/reference/crew_class_launcher_slurm.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":" SLURM launcher class — crew_class_launcher_slurm","text":"NULL (invisibly). Throws error field invalid.","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"method-script-","dir":"Reference","previous_headings":"","what":"Method script()","title":" SLURM launcher class — crew_class_launcher_slurm","text":"Generate job script.","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":" SLURM launcher class — crew_class_launcher_slurm","text":"","code":"crew_class_launcher_slurm$script(name)"},{"path":"/reference/crew_class_launcher_slurm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" SLURM launcher class — crew_class_launcher_slurm","text":"name Character length 1, name job. inspection purposes, can supply mock job name.","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":" SLURM launcher class — crew_class_launcher_slurm","text":"Includes everything except worker-instance-specific job name worker-instance-specific call crew::crew_worker(), get inserted bottom script launch time.","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":" SLURM launcher class — crew_class_launcher_slurm","text":"Character vector lines job script.","code":""},{"path":"/reference/crew_class_launcher_slurm.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":" SLURM launcher class — crew_class_launcher_slurm","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { launcher <- crew_launcher_slurm(   slurm_log_output = \"log_file_%A.log\",   slurm_log_error = NULL,   slurm_memory_gigabytes_per_cpu = 4096 ) launcher$script(name = \"my_job_name\") }"},{"path":"/reference/crew_class_launcher_slurm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" SLURM launcher class — crew_class_launcher_slurm","text":"","code":"## ------------------------------------------------ ## Method `crew_class_launcher_slurm$script` ## ------------------------------------------------  if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { launcher <- crew_launcher_slurm(   slurm_log_output = \"log_file_%A.log\",   slurm_log_error = NULL,   slurm_memory_gigabytes_per_cpu = 4096 ) launcher$script(name = \"my_job_name\") }"},{"path":"/reference/crew_class_monitor_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":" Abstract cluster monitor class — crew_class_monitor_cluster","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"Abstract cluster monitor R6 class","code":""},{"path":"/reference/crew_class_monitor_cluster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"See crew_monitor_cluster().","code":""},{"path":[]},{"path":"/reference/crew_class_monitor_cluster.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"verbose See crew_monitor_cluster(). command_list See crew_monitor_cluster(). command_terminate See crew_monitor_cluster().","code":""},{"path":[]},{"path":"/reference/crew_class_monitor_cluster.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"crew_class_monitor_cluster$new() crew_class_monitor_cluster$validate()","code":""},{"path":"/reference/crew_class_monitor_cluster.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"Abstract cluster monitor constructor.","code":""},{"path":"/reference/crew_class_monitor_cluster.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"","code":"crew_class_monitor_cluster$new(   verbose = NULL,   command_list = NULL,   command_terminate = NULL )"},{"path":"/reference/crew_class_monitor_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"verbose See crew_monitor_cluster(). command_list See crew_monitor_cluster(). command_terminate See crew_monitor_cluster().","code":""},{"path":"/reference/crew_class_monitor_cluster.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"abstract cluster monitor object.","code":""},{"path":"/reference/crew_class_monitor_cluster.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"Validate monitor.","code":""},{"path":"/reference/crew_class_monitor_cluster.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"","code":"crew_class_monitor_cluster$validate()"},{"path":"/reference/crew_class_monitor_cluster.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":" Abstract cluster monitor class — crew_class_monitor_cluster","text":"NULL (invisibly).","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":null,"dir":"Reference","previous_headings":"","what":" SGE monitor class — crew_class_monitor_sge","title":" SGE monitor class — crew_class_monitor_sge","text":"SGE monitor R6 class","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" SGE monitor class — crew_class_monitor_sge","text":"See crew_monitor_sge().","code":""},{"path":[]},{"path":"/reference/crew_class_monitor_sge.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":" SGE monitor class — crew_class_monitor_sge","text":"crew.cluster::crew_class_monitor_cluster -> crew_class_monitor_sge","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":" SGE monitor class — crew_class_monitor_sge","text":"crew.cluster::crew_class_monitor_cluster$initialize() crew.cluster::crew_class_monitor_cluster$validate()","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":" SGE monitor class — crew_class_monitor_sge","text":"crew_class_monitor_sge$jobs() crew_class_monitor_sge$terminate()","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"method-jobs-","dir":"Reference","previous_headings":"","what":"Method jobs()","title":" SGE monitor class — crew_class_monitor_sge","text":"List SGE jobs.","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":" SGE monitor class — crew_class_monitor_sge","text":"","code":"crew_class_monitor_sge$jobs(user = ps::ps_username())"},{"path":"/reference/crew_class_monitor_sge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" SGE monitor class — crew_class_monitor_sge","text":"user Character length 1, user name jobs list.","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":" SGE monitor class — crew_class_monitor_sge","text":"tibble one row per SGE job columns specific details.","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"method-terminate-","dir":"Reference","previous_headings":"","what":"Method terminate()","title":" SGE monitor class — crew_class_monitor_sge","text":"Terminate one SGE jobs.","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":" SGE monitor class — crew_class_monitor_sge","text":"","code":"crew_class_monitor_sge$terminate(jobs = NULL, all = FALSE)"},{"path":"/reference/crew_class_monitor_sge.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":" SGE monitor class — crew_class_monitor_sge","text":"jobs Character vector job names job IDs terminate. Ignored set TRUE. Logical length 1, whether terminate jobs user name. terminates SGE jobs, regardless whether crew.cluster launched , use caution!","code":""},{"path":"/reference/crew_class_monitor_sge.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":" SGE monitor class — crew_class_monitor_sge","text":"NULL (invisibly).","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":null,"dir":"Reference","previous_headings":"","what":" SLURM monitor class — crew_class_monitor_slurm","title":" SLURM monitor class — crew_class_monitor_slurm","text":"SLURM monitor R6 class","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" SLURM monitor class — crew_class_monitor_slurm","text":"See crew_monitor_slurm().","code":""},{"path":[]},{"path":"/reference/crew_class_monitor_slurm.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":" SLURM monitor class — crew_class_monitor_slurm","text":"crew.cluster::crew_class_monitor_cluster -> crew_class_monitor_slurm","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":" SLURM monitor class — crew_class_monitor_slurm","text":"crew.cluster::crew_class_monitor_cluster$initialize() crew.cluster::crew_class_monitor_cluster$validate()","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":" SLURM monitor class — crew_class_monitor_slurm","text":"crew_class_monitor_slurm$jobs() crew_class_monitor_slurm$terminate()","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"method-jobs-","dir":"Reference","previous_headings":"","what":"Method jobs()","title":" SLURM monitor class — crew_class_monitor_slurm","text":"List SLURM jobs.","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":" SLURM monitor class — crew_class_monitor_slurm","text":"","code":"crew_class_monitor_slurm$jobs(user = ps::ps_username())"},{"path":"/reference/crew_class_monitor_slurm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" SLURM monitor class — crew_class_monitor_slurm","text":"user Character length 1, user name jobs list.","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":" SLURM monitor class — crew_class_monitor_slurm","text":"function loads entire SLURM queue users, may take several seconds execute. intended interactive use, especially avoided scripts called frequently. requires SLURM version 20.02 higher, along YAML plugin.","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":" SLURM monitor class — crew_class_monitor_slurm","text":"tibble one row per SLURM job columns specific details.","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"method-terminate-","dir":"Reference","previous_headings":"","what":"Method terminate()","title":" SLURM monitor class — crew_class_monitor_slurm","text":"Terminate one SLURM jobs.","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":" SLURM monitor class — crew_class_monitor_slurm","text":"","code":"crew_class_monitor_slurm$terminate(jobs = NULL, all = FALSE)"},{"path":"/reference/crew_class_monitor_slurm.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":" SLURM monitor class — crew_class_monitor_slurm","text":"jobs Character vector job names job IDs terminate. Ignored set TRUE. Logical length 1, whether terminate jobs user name. terminates SLURM jobs, regardless whether crew.cluster launched , use caution!","code":""},{"path":"/reference/crew_class_monitor_slurm.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":" SLURM monitor class — crew_class_monitor_slurm","text":"NULL (invisibly).","code":""},{"path":"/reference/crew_controller_lsf.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a controller with a LSF launcher. — crew_controller_lsf","title":" Create a controller with a LSF launcher. — crew_controller_lsf","text":"Create R6 object submit tasks launch workers LSF workers.","code":""},{"path":"/reference/crew_controller_lsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a controller with a LSF launcher. — crew_controller_lsf","text":"","code":"crew_controller_lsf(   name = NULL,   workers = 1L,   host = NULL,   port = NULL,   tls = crew::crew_tls(mode = \"automatic\"),   tls_enable = NULL,   tls_config = NULL,   serialization = NULL,   seconds_interval = 0.25,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = 300,   seconds_wall = Inf,   seconds_exit = NULL,   retry_tasks = NULL,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   crashes_error = NULL,   r_arguments = c(\"--no-save\", \"--no-restore\"),   crashes_max = 5L,   backup = NULL,   options_metrics = crew::crew_options_metrics(),   options_cluster = crew.cluster::crew_options_lsf(),   verbose = NULL,   command_submit = NULL,   command_terminate = NULL,   command_delete = NULL,   script_directory = NULL,   script_lines = NULL,   lsf_cwd = NULL,   lsf_log_output = NULL,   lsf_log_error = NULL,   lsf_memory_gigabytes_limit = NULL,   lsf_memory_gigabytes_required = NULL,   lsf_cores = NULL )"},{"path":"/reference/crew_controller_lsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a controller with a LSF launcher. — crew_controller_lsf","text":"name Character string, name launcher. name NULL, name automatically generated launcher starts. workers Maximum number workers run concurrently auto-scaling, excluding task retries manual calls launch(). Special workers allocated task retries count towards limit, number workers running given time may exceed maximum. smaller number workers may run number executing tasks smaller supplied value workers argument. host IP address mirai client send receive tasks. NULL, host defaults nanonext::ip_addr()[1]. port TCP port listen workers. NULL, available ephemeral port automatically chosen. Controllers running simultaneously computer (controller group) must share TCP port. tls TLS configuration object crew_tls(). tls_enable Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. tls_config Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. serialization Either NULL (default) object produced mirai::serial_config() control serialization data sent workers. can help either efficient data transfers preserve attributes otherwise non-exportable objects (torch tensors arrow tables). See ?mirai::serial_config details. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete. certain cases, exponential backoff used argument passed seconds_max crew_throttle() object. seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). seconds_exit Deprecated 2023-09-21 version 0.1.2.9000. longer necessary. retry_tasks Deprecated 2025-01-13 (crew version 0.10.2.9002). tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals TRUE reset global environment variables tasks, FALSE leave alone. reset_packages TRUE detach packages loaded task (runs task), FALSE leave packages alone. either case, namespaces detached. reset_options TRUE reset global options original state task, FALSE otherwise. recommended set reset_options = TRUE reset_packages also TRUE packages sometimes rely options set loading time. reasons, reset_options resets options nonempty beginning task. task sets entirely new option already options(), reset_options = TRUE delete option. garbage_collection TRUE run garbage collection task task, FALSE skip. crashes_error Deprecated 2025-01-13 (crew version 0.10.2.9002). r_arguments Optional character vector command line arguments pass Rscript (non-Windows) Rscript.exe (Windows) starting worker. Example: r_arguments = c(\"--vanilla\", \"--max-connections=32\"). crashes_max rare cases, worker may exit unexpectedly completes current task. happens, pop() returns status \"crash\" instead \"error\" task. controller automatically retry task, can retry manually calling push() using task name . (However, targets pipelines running crew automatically retry tasks whose workers crashed.) crashes_max non-negative integer, sets maximum number allowable consecutive crashes given task. task's worker crashes crashes_max times row, pop() throws error tries return results task. backup optional crew controller object, NULL omit. supplied, backup controller runs pushed tasks already reached crashes_max consecutive crashes. Using backup, can create chain controllers different levels resources (worker memory CPUs) task fails one controller can retry using incrementally powerful workers. controllers backup chain part controller group (see crew_controller_group()) can call group-level pop() collect() methods make sure get results regardless controller actually ended running task. Limitations backup: * crashes_max needs positive order backup used. Otherwise, every task always skip current controller go backup. * backup controller group. must ordinary controller. options_metrics Either NULL opt resource metric logging workers, object crew_options_metrics() enable configure resource metric logging workers. resource logging run, autometric R package version 0.1.0 higher must installed. options_cluster options list crew_options_lsf() cluster-specific configuration options. verbose Deprecated. Use options_cluster instead. command_submit Deprecated. Use options_cluster instead. command_terminate Deprecated. Use options_cluster instead. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Deprecated. Use options_cluster instead. script_lines Deprecated. Use options_cluster instead. lsf_cwd Deprecated. Use options_cluster instead. lsf_log_output Deprecated. Use options_cluster instead. lsf_log_error Deprecated. Use options_cluster instead. lsf_memory_gigabytes_limit Deprecated. Use options_cluster instead. lsf_memory_gigabytes_required Deprecated. Use options_cluster instead. lsf_cores Deprecated. Use options_cluster instead.","code":""},{"path":"/reference/crew_controller_lsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Create a controller with a LSF launcher. — crew_controller_lsf","text":"WARNING: crew.cluster LSF plugin experimental actually tested LSF cluster. Please proceed caution report bugs https://github.com/wlandau/crew.cluster.","code":""},{"path":"/reference/crew_controller_lsf.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create a controller with a LSF launcher. — crew_controller_lsf","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_controller_lsf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" Create a controller with a LSF launcher. — crew_controller_lsf","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { controller <- crew_controller_lsf() controller$start() controller$push(name = \"task\", command = sqrt(4)) controller$wait() controller$pop()$result controller$terminate() }"},{"path":"/reference/crew_controller_pbs.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a controller with a PBS/TORQUE launcher. — crew_controller_pbs","title":" Create a controller with a PBS/TORQUE launcher. — crew_controller_pbs","text":"Create R6 object submit tasks launch workers PBS TORQUE cluster.","code":""},{"path":"/reference/crew_controller_pbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a controller with a PBS/TORQUE launcher. — crew_controller_pbs","text":"","code":"crew_controller_pbs(   name = NULL,   workers = 1L,   host = NULL,   port = NULL,   tls = crew::crew_tls(mode = \"automatic\"),   tls_enable = NULL,   tls_config = NULL,   serialization = NULL,   seconds_interval = 0.25,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = 300,   seconds_wall = Inf,   seconds_exit = NULL,   retry_tasks = NULL,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   crashes_error = NULL,   r_arguments = c(\"--no-save\", \"--no-restore\"),   crashes_max = 5L,   backup = NULL,   options_metrics = crew::crew_options_metrics(),   options_cluster = crew.cluster::crew_options_pbs(),   verbose = NULL,   command_submit = NULL,   command_terminate = NULL,   command_delete = NULL,   script_directory = NULL,   script_lines = NULL,   pbs_cwd = NULL,   pbs_log_output = NULL,   pbs_log_error = NULL,   pbs_log_join = NULL,   pbs_memory_gigabytes_required = NULL,   pbs_cores = NULL,   pbs_walltime_hours = NULL )"},{"path":"/reference/crew_controller_pbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a controller with a PBS/TORQUE launcher. — crew_controller_pbs","text":"name Character string, name launcher. name NULL, name automatically generated launcher starts. workers Maximum number workers run concurrently auto-scaling, excluding task retries manual calls launch(). Special workers allocated task retries count towards limit, number workers running given time may exceed maximum. smaller number workers may run number executing tasks smaller supplied value workers argument. host IP address mirai client send receive tasks. NULL, host defaults nanonext::ip_addr()[1]. port TCP port listen workers. NULL, available ephemeral port automatically chosen. Controllers running simultaneously computer (controller group) must share TCP port. tls TLS configuration object crew_tls(). tls_enable Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. tls_config Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. serialization Either NULL (default) object produced mirai::serial_config() control serialization data sent workers. can help either efficient data transfers preserve attributes otherwise non-exportable objects (torch tensors arrow tables). See ?mirai::serial_config details. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete. certain cases, exponential backoff used argument passed seconds_max crew_throttle() object. seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). seconds_exit Deprecated 2023-09-21 version 0.1.2.9000. longer necessary. retry_tasks Deprecated 2025-01-13 (crew version 0.10.2.9002). tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals TRUE reset global environment variables tasks, FALSE leave alone. reset_packages TRUE detach packages loaded task (runs task), FALSE leave packages alone. either case, namespaces detached. reset_options TRUE reset global options original state task, FALSE otherwise. recommended set reset_options = TRUE reset_packages also TRUE packages sometimes rely options set loading time. reasons, reset_options resets options nonempty beginning task. task sets entirely new option already options(), reset_options = TRUE delete option. garbage_collection TRUE run garbage collection task task, FALSE skip. crashes_error Deprecated 2025-01-13 (crew version 0.10.2.9002). r_arguments Optional character vector command line arguments pass Rscript (non-Windows) Rscript.exe (Windows) starting worker. Example: r_arguments = c(\"--vanilla\", \"--max-connections=32\"). crashes_max rare cases, worker may exit unexpectedly completes current task. happens, pop() returns status \"crash\" instead \"error\" task. controller automatically retry task, can retry manually calling push() using task name . (However, targets pipelines running crew automatically retry tasks whose workers crashed.) crashes_max non-negative integer, sets maximum number allowable consecutive crashes given task. task's worker crashes crashes_max times row, pop() throws error tries return results task. backup optional crew controller object, NULL omit. supplied, backup controller runs pushed tasks already reached crashes_max consecutive crashes. Using backup, can create chain controllers different levels resources (worker memory CPUs) task fails one controller can retry using incrementally powerful workers. controllers backup chain part controller group (see crew_controller_group()) can call group-level pop() collect() methods make sure get results regardless controller actually ended running task. Limitations backup: * crashes_max needs positive order backup used. Otherwise, every task always skip current controller go backup. * backup controller group. must ordinary controller. options_metrics Either NULL opt resource metric logging workers, object crew_options_metrics() enable configure resource metric logging workers. resource logging run, autometric R package version 0.1.0 higher must installed. options_cluster options list crew_options_pbs() cluster-specific configuration options. verbose Deprecated. Use options_cluster instead. command_submit Deprecated. Use options_cluster instead. command_terminate Deprecated. Use options_cluster instead. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Deprecated. Use options_cluster instead. script_lines Deprecated. Use options_cluster instead. pbs_cwd Deprecated. Use options_cluster instead. pbs_log_output Deprecated. Use options_cluster instead. pbs_log_error Deprecated. Use options_cluster instead. pbs_log_join Deprecated. Use options_cluster instead. pbs_memory_gigabytes_required Deprecated. Use options_cluster instead. pbs_cores Deprecated. Use options_cluster instead. pbs_walltime_hours Deprecated. Use options_cluster instead.","code":""},{"path":"/reference/crew_controller_pbs.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create a controller with a PBS/TORQUE launcher. — crew_controller_pbs","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_controller_pbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" Create a controller with a PBS/TORQUE launcher. — crew_controller_pbs","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { controller <- crew_controller_pbs() controller$start() controller$push(name = \"task\", command = sqrt(4)) controller$wait() controller$pop()$result controller$terminate() }"},{"path":"/reference/crew_controller_sge.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a controller with a Sun Grid Engine (SGE) launcher. — crew_controller_sge","title":" Create a controller with a Sun Grid Engine (SGE) launcher. — crew_controller_sge","text":"Create R6 object submit tasks launch workers Sun Grid Engine (SGE) workers.","code":""},{"path":"/reference/crew_controller_sge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a controller with a Sun Grid Engine (SGE) launcher. — crew_controller_sge","text":"","code":"crew_controller_sge(   name = NULL,   workers = 1L,   host = NULL,   port = NULL,   tls = crew::crew_tls(mode = \"automatic\"),   tls_enable = NULL,   tls_config = NULL,   serialization = NULL,   seconds_interval = 0.25,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = 300,   seconds_wall = Inf,   seconds_exit = NULL,   retry_tasks = NULL,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   crashes_error = NULL,   r_arguments = c(\"--no-save\", \"--no-restore\"),   crashes_max = 5L,   backup = NULL,   options_metrics = crew::crew_options_metrics(),   options_cluster = crew.cluster::crew_options_sge(),   verbose = NULL,   command_submit = NULL,   command_terminate = NULL,   command_delete = NULL,   script_directory = NULL,   script_lines = NULL,   sge_cwd = NULL,   sge_envvars = NULL,   sge_log_output = NULL,   sge_log_error = NULL,   sge_log_join = NULL,   sge_memory_gigabytes_limit = NULL,   sge_memory_gigabytes_required = NULL,   sge_cores = NULL,   sge_gpu = NULL )"},{"path":"/reference/crew_controller_sge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a controller with a Sun Grid Engine (SGE) launcher. — crew_controller_sge","text":"name Character string, name launcher. name NULL, name automatically generated launcher starts. workers Maximum number workers run concurrently auto-scaling, excluding task retries manual calls launch(). Special workers allocated task retries count towards limit, number workers running given time may exceed maximum. smaller number workers may run number executing tasks smaller supplied value workers argument. host IP address mirai client send receive tasks. NULL, host defaults nanonext::ip_addr()[1]. port TCP port listen workers. NULL, available ephemeral port automatically chosen. Controllers running simultaneously computer (controller group) must share TCP port. tls TLS configuration object crew_tls(). tls_enable Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. tls_config Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. serialization Either NULL (default) object produced mirai::serial_config() control serialization data sent workers. can help either efficient data transfers preserve attributes otherwise non-exportable objects (torch tensors arrow tables). See ?mirai::serial_config details. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete. certain cases, exponential backoff used argument passed seconds_max crew_throttle() object. seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). seconds_exit Deprecated 2023-09-21 version 0.1.2.9000. longer necessary. retry_tasks Deprecated 2025-01-13 (crew version 0.10.2.9002). tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals TRUE reset global environment variables tasks, FALSE leave alone. reset_packages TRUE detach packages loaded task (runs task), FALSE leave packages alone. either case, namespaces detached. reset_options TRUE reset global options original state task, FALSE otherwise. recommended set reset_options = TRUE reset_packages also TRUE packages sometimes rely options set loading time. reasons, reset_options resets options nonempty beginning task. task sets entirely new option already options(), reset_options = TRUE delete option. garbage_collection TRUE run garbage collection task task, FALSE skip. crashes_error Deprecated 2025-01-13 (crew version 0.10.2.9002). r_arguments Optional character vector command line arguments pass Rscript (non-Windows) Rscript.exe (Windows) starting worker. Example: r_arguments = c(\"--vanilla\", \"--max-connections=32\"). crashes_max rare cases, worker may exit unexpectedly completes current task. happens, pop() returns status \"crash\" instead \"error\" task. controller automatically retry task, can retry manually calling push() using task name . (However, targets pipelines running crew automatically retry tasks whose workers crashed.) crashes_max non-negative integer, sets maximum number allowable consecutive crashes given task. task's worker crashes crashes_max times row, pop() throws error tries return results task. backup optional crew controller object, NULL omit. supplied, backup controller runs pushed tasks already reached crashes_max consecutive crashes. Using backup, can create chain controllers different levels resources (worker memory CPUs) task fails one controller can retry using incrementally powerful workers. controllers backup chain part controller group (see crew_controller_group()) can call group-level pop() collect() methods make sure get results regardless controller actually ended running task. Limitations backup: * crashes_max needs positive order backup used. Otherwise, every task always skip current controller go backup. * backup controller group. must ordinary controller. options_metrics Either NULL opt resource metric logging workers, object crew_options_metrics() enable configure resource metric logging workers. resource logging run, autometric R package version 0.1.0 higher must installed. options_cluster options list crew_options_sge() cluster-specific configuration options. verbose Deprecated. Use options_cluster instead. command_submit Deprecated. Use options_cluster instead. command_terminate Deprecated. Use options_cluster instead. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Deprecated. Use options_cluster instead. script_lines Deprecated. Use options_cluster instead. sge_cwd Deprecated. Use options_cluster instead. sge_envvars Deprecated. Use options_cluster instead. sge_log_output Deprecated. Use options_cluster instead. sge_log_error Deprecated. Use options_cluster instead. sge_log_join Deprecated. Use options_cluster instead. sge_memory_gigabytes_limit Deprecated. Use options_cluster instead. sge_memory_gigabytes_required Deprecated. Use options_cluster instead. sge_cores Deprecated. Use options_cluster instead. sge_gpu Deprecated. Use options_cluster instead.","code":""},{"path":"/reference/crew_controller_sge.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create a controller with a Sun Grid Engine (SGE) launcher. — crew_controller_sge","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_controller_sge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" Create a controller with a Sun Grid Engine (SGE) launcher. — crew_controller_sge","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { controller <- crew_controller_sge() controller$start() controller$push(name = \"task\", command = sqrt(4)) controller$wait() controller$pop()$result controller$terminate() }"},{"path":"/reference/crew_controller_slurm.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a controller with a SLURM launcher. — crew_controller_slurm","title":" Create a controller with a SLURM launcher. — crew_controller_slurm","text":"Create R6 object submit tasks launch workers SLURM workers.","code":""},{"path":"/reference/crew_controller_slurm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a controller with a SLURM launcher. — crew_controller_slurm","text":"","code":"crew_controller_slurm(   name = NULL,   workers = 1L,   host = NULL,   port = NULL,   tls = crew::crew_tls(mode = \"automatic\"),   tls_enable = NULL,   tls_config = NULL,   serialization = NULL,   seconds_interval = 0.25,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = 300,   seconds_wall = Inf,   seconds_exit = NULL,   retry_tasks = NULL,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   crashes_error = NULL,   r_arguments = c(\"--no-save\", \"--no-restore\"),   crashes_max = 5L,   backup = NULL,   options_metrics = crew::crew_options_metrics(),   options_cluster = crew.cluster::crew_options_slurm(),   verbose = NULL,   command_submit = NULL,   command_terminate = NULL,   command_delete = NULL,   script_directory = NULL,   script_lines = NULL,   slurm_log_output = NULL,   slurm_log_error = NULL,   slurm_memory_gigabytes_required = NULL,   slurm_memory_gigabytes_per_cpu = NULL,   slurm_cpus_per_task = NULL,   slurm_time_minutes = NULL,   slurm_partition = NULL )"},{"path":"/reference/crew_controller_slurm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a controller with a SLURM launcher. — crew_controller_slurm","text":"name Character string, name launcher. name NULL, name automatically generated launcher starts. workers Maximum number workers run concurrently auto-scaling, excluding task retries manual calls launch(). Special workers allocated task retries count towards limit, number workers running given time may exceed maximum. smaller number workers may run number executing tasks smaller supplied value workers argument. host IP address mirai client send receive tasks. NULL, host defaults nanonext::ip_addr()[1]. port TCP port listen workers. NULL, available ephemeral port automatically chosen. Controllers running simultaneously computer (controller group) must share TCP port. tls TLS configuration object crew_tls(). tls_enable Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. tls_config Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. serialization Either NULL (default) object produced mirai::serial_config() control serialization data sent workers. can help either efficient data transfers preserve attributes otherwise non-exportable objects (torch tensors arrow tables). See ?mirai::serial_config details. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete. certain cases, exponential backoff used argument passed seconds_max crew_throttle() object. seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). seconds_exit Deprecated 2023-09-21 version 0.1.2.9000. longer necessary. retry_tasks Deprecated 2025-01-13 (crew version 0.10.2.9002). tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals TRUE reset global environment variables tasks, FALSE leave alone. reset_packages TRUE detach packages loaded task (runs task), FALSE leave packages alone. either case, namespaces detached. reset_options TRUE reset global options original state task, FALSE otherwise. recommended set reset_options = TRUE reset_packages also TRUE packages sometimes rely options set loading time. reasons, reset_options resets options nonempty beginning task. task sets entirely new option already options(), reset_options = TRUE delete option. garbage_collection TRUE run garbage collection task task, FALSE skip. crashes_error Deprecated 2025-01-13 (crew version 0.10.2.9002). r_arguments Optional character vector command line arguments pass Rscript (non-Windows) Rscript.exe (Windows) starting worker. Example: r_arguments = c(\"--vanilla\", \"--max-connections=32\"). crashes_max rare cases, worker may exit unexpectedly completes current task. happens, pop() returns status \"crash\" instead \"error\" task. controller automatically retry task, can retry manually calling push() using task name . (However, targets pipelines running crew automatically retry tasks whose workers crashed.) crashes_max non-negative integer, sets maximum number allowable consecutive crashes given task. task's worker crashes crashes_max times row, pop() throws error tries return results task. backup optional crew controller object, NULL omit. supplied, backup controller runs pushed tasks already reached crashes_max consecutive crashes. Using backup, can create chain controllers different levels resources (worker memory CPUs) task fails one controller can retry using incrementally powerful workers. controllers backup chain part controller group (see crew_controller_group()) can call group-level pop() collect() methods make sure get results regardless controller actually ended running task. Limitations backup: * crashes_max needs positive order backup used. Otherwise, every task always skip current controller go backup. * backup controller group. must ordinary controller. options_metrics Either NULL opt resource metric logging workers, object crew_options_metrics() enable configure resource metric logging workers. resource logging run, autometric R package version 0.1.0 higher must installed. options_cluster options list crew_options_slurm() cluster-specific configuration options. verbose Deprecated. Use options_cluster instead. command_submit Deprecated. Use options_cluster instead. command_terminate Deprecated. Use options_cluster instead. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Deprecated. Use options_cluster instead. script_lines Deprecated. Use options_cluster instead. slurm_log_output Deprecated. Use options_cluster instead. slurm_log_error Deprecated. Use options_cluster instead. slurm_memory_gigabytes_required Deprecated. Use options_cluster instead. slurm_memory_gigabytes_per_cpu Deprecated. Use options_cluster instead. slurm_cpus_per_task Deprecated. Use options_cluster instead. slurm_time_minutes Deprecated. Use options_cluster instead. slurm_partition Deprecated. Use options_cluster instead.","code":""},{"path":"/reference/crew_controller_slurm.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create a controller with a SLURM launcher. — crew_controller_slurm","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_controller_slurm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" Create a controller with a SLURM launcher. — crew_controller_slurm","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { controller <- crew_controller_slurm() controller$start() controller$push(name = \"task\", command = sqrt(4)) controller$wait() controller$pop()$result controller$terminate() }"},{"path":"/reference/crew_launcher_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":" Create an abstract cluster launcher object. — crew_launcher_cluster","title":" Create an abstract cluster launcher object. — crew_launcher_cluster","text":"Create R6 abstract cluster launcher object.","code":""},{"path":"/reference/crew_launcher_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create an abstract cluster launcher object. — crew_launcher_cluster","text":"","code":"crew_launcher_cluster(   name = NULL,   workers = 1L,   seconds_interval = 0.5,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = 300,   seconds_wall = Inf,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = NULL,   reset_packages = NULL,   reset_options = NULL,   garbage_collection = NULL,   crashes_error = NULL,   tls = crew::crew_tls(mode = \"automatic\"),   r_arguments = c(\"--no-save\", \"--no-restore\"),   options_metrics = crew::crew_options_metrics(),   options_cluster = crew.cluster::crew_options_cluster(),   verbose = NULL,   command_submit = NULL,   command_terminate = NULL,   command_delete = NULL,   script_directory = NULL,   script_lines = NULL )"},{"path":"/reference/crew_launcher_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create an abstract cluster launcher object. — crew_launcher_cluster","text":"name Character string, name launcher. name NULL, name automatically generated launcher starts. workers Maximum number workers run concurrently auto-scaling, excluding task retries manual calls launch(). Special workers allocated task retries count towards limit, number workers running given time may exceed maximum. smaller number workers may run number executing tasks smaller supplied value workers argument. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete. certain cases, exponential backoff used argument passed seconds_max crew_throttle() object. seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use reset_globals option crew_controller() instead. reset_packages Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use reset_packages option crew_controller() instead. reset_options Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use reset_options option crew_controller() instead. garbage_collection Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use garbage_collection option crew_controller() instead. crashes_error Deprecated 2025-01-13 (crew version 0.10.2.9002). tls TLS configuration object crew_tls(). r_arguments Optional character vector command line arguments pass Rscript (non-Windows) Rscript.exe (Windows) starting worker. Example: r_arguments = c(\"--vanilla\", \"--max-connections=32\"). options_metrics Either NULL opt resource metric logging workers, object crew_options_metrics() enable configure resource metric logging workers. resource logging run, autometric R package version 0.1.0 higher must installed. options_cluster List options crew.cluster options function crew_options_slurm(). Make sure cluster types launcher options function match. verbose Deprecated. Use options_cluster instead. command_submit Deprecated. Use options_cluster instead. command_terminate Deprecated. Use options_cluster instead. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Deprecated. Use options_cluster instead. script_lines Deprecated. Use options_cluster instead.","code":""},{"path":"/reference/crew_launcher_cluster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Create an abstract cluster launcher object. — crew_launcher_cluster","text":"abstract class used develop specific launcher classes specific computing platforms.","code":""},{"path":"/reference/crew_launcher_cluster.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create an abstract cluster launcher object. — crew_launcher_cluster","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_launcher_lsf.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a launcher with LSF workers. — crew_launcher_lsf","title":" Create a launcher with LSF workers. — crew_launcher_lsf","text":"Create R6 object launch maintain workers LSF jobs.","code":""},{"path":"/reference/crew_launcher_lsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a launcher with LSF workers. — crew_launcher_lsf","text":"","code":"crew_launcher_lsf(   name = NULL,   workers = 1L,   seconds_interval = 0.5,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = 300,   seconds_wall = Inf,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = NULL,   reset_packages = NULL,   reset_options = NULL,   garbage_collection = NULL,   crashes_error = NULL,   tls = crew::crew_tls(mode = \"automatic\"),   r_arguments = c(\"--no-save\", \"--no-restore\"),   options_metrics = crew::crew_options_metrics(),   options_cluster = crew.cluster::crew_options_lsf(),   verbose = NULL,   command_submit = NULL,   command_terminate = NULL,   command_delete = NULL,   script_directory = NULL,   script_lines = NULL,   lsf_cwd = NULL,   lsf_log_output = NULL,   lsf_log_error = NULL,   lsf_memory_gigabytes_limit = NULL,   lsf_memory_gigabytes_required = NULL,   lsf_cores = NULL )"},{"path":"/reference/crew_launcher_lsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a launcher with LSF workers. — crew_launcher_lsf","text":"name Character string, name launcher. name NULL, name automatically generated launcher starts. workers Maximum number workers run concurrently auto-scaling, excluding task retries manual calls launch(). Special workers allocated task retries count towards limit, number workers running given time may exceed maximum. smaller number workers may run number executing tasks smaller supplied value workers argument. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete. certain cases, exponential backoff used argument passed seconds_max crew_throttle() object. seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use reset_globals option crew_controller() instead. reset_packages Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use reset_packages option crew_controller() instead. reset_options Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use reset_options option crew_controller() instead. garbage_collection Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use garbage_collection option crew_controller() instead. crashes_error Deprecated 2025-01-13 (crew version 0.10.2.9002). tls TLS configuration object crew_tls(). r_arguments Optional character vector command line arguments pass Rscript (non-Windows) Rscript.exe (Windows) starting worker. Example: r_arguments = c(\"--vanilla\", \"--max-connections=32\"). options_metrics Either NULL opt resource metric logging workers, object crew_options_metrics() enable configure resource metric logging workers. resource logging run, autometric R package version 0.1.0 higher must installed. options_cluster options list crew_options_lsf() cluster-specific configuration options. verbose Deprecated. Use options_cluster instead. command_submit Deprecated. Use options_cluster instead. command_terminate Deprecated. Use options_cluster instead. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Deprecated. Use options_cluster instead. script_lines Deprecated. Use options_cluster instead. lsf_cwd Deprecated. Use options_cluster instead. lsf_log_output Deprecated. Use options_cluster instead. lsf_log_error Deprecated. Use options_cluster instead. lsf_memory_gigabytes_limit Deprecated. Use options_cluster instead. lsf_memory_gigabytes_required Deprecated. Use options_cluster instead. lsf_cores Deprecated. Use options_cluster instead.","code":""},{"path":"/reference/crew_launcher_lsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Create a launcher with LSF workers. — crew_launcher_lsf","text":"WARNING: crew.cluster LSF plugin experimental. Please proceed caution report bugs https://github.com/wlandau/crew.cluster. launch LSF worker, launcher creates temporary job script call crew::crew_worker() submits LSF job sbatch. see lines job script advance, use script() method launcher. lines except job name call crew::crew_worker(), inserted last minute time actually launch worker.","code":""},{"path":"/reference/crew_launcher_lsf.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create a launcher with LSF workers. — crew_launcher_lsf","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_launcher_pbs.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a launcher with PBS or TORQUE workers. — crew_launcher_pbs","title":" Create a launcher with PBS or TORQUE workers. — crew_launcher_pbs","text":"Create R6 object launch maintain workers jobs PBS TORQUE cluster.","code":""},{"path":"/reference/crew_launcher_pbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a launcher with PBS or TORQUE workers. — crew_launcher_pbs","text":"","code":"crew_launcher_pbs(   name = NULL,   workers = 1L,   seconds_interval = 0.5,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = 300,   seconds_wall = Inf,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = NULL,   reset_packages = NULL,   reset_options = NULL,   garbage_collection = NULL,   crashes_error = NULL,   tls = crew::crew_tls(mode = \"automatic\"),   r_arguments = c(\"--no-save\", \"--no-restore\"),   options_metrics = crew::crew_options_metrics(),   options_cluster = crew.cluster::crew_options_pbs(),   verbose = NULL,   command_submit = NULL,   command_terminate = NULL,   command_delete = NULL,   script_directory = NULL,   script_lines = NULL,   pbs_cwd = NULL,   pbs_log_output = NULL,   pbs_log_error = NULL,   pbs_log_join = NULL,   pbs_memory_gigabytes_required = NULL,   pbs_cores = NULL,   pbs_walltime_hours = NULL )"},{"path":"/reference/crew_launcher_pbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a launcher with PBS or TORQUE workers. — crew_launcher_pbs","text":"name Character string, name launcher. name NULL, name automatically generated launcher starts. workers Maximum number workers run concurrently auto-scaling, excluding task retries manual calls launch(). Special workers allocated task retries count towards limit, number workers running given time may exceed maximum. smaller number workers may run number executing tasks smaller supplied value workers argument. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete. certain cases, exponential backoff used argument passed seconds_max crew_throttle() object. seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use reset_globals option crew_controller() instead. reset_packages Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use reset_packages option crew_controller() instead. reset_options Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use reset_options option crew_controller() instead. garbage_collection Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use garbage_collection option crew_controller() instead. crashes_error Deprecated 2025-01-13 (crew version 0.10.2.9002). tls TLS configuration object crew_tls(). r_arguments Optional character vector command line arguments pass Rscript (non-Windows) Rscript.exe (Windows) starting worker. Example: r_arguments = c(\"--vanilla\", \"--max-connections=32\"). options_metrics Either NULL opt resource metric logging workers, object crew_options_metrics() enable configure resource metric logging workers. resource logging run, autometric R package version 0.1.0 higher must installed. options_cluster options list crew_options_pbs() cluster-specific configuration options. verbose Deprecated. Use options_cluster instead. command_submit Deprecated. Use options_cluster instead. command_terminate Deprecated. Use options_cluster instead. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Deprecated. Use options_cluster instead. script_lines Deprecated. Use options_cluster instead. pbs_cwd Deprecated. Use options_cluster instead. pbs_log_output Deprecated. Use options_cluster instead. pbs_log_error Deprecated. Use options_cluster instead. pbs_log_join Deprecated. Use options_cluster instead. pbs_memory_gigabytes_required Deprecated. Use options_cluster instead. pbs_cores Deprecated. Use options_cluster instead. pbs_walltime_hours Deprecated. Use options_cluster instead.","code":""},{"path":"/reference/crew_launcher_pbs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Create a launcher with PBS or TORQUE workers. — crew_launcher_pbs","text":"WARNING: crew.cluster PBS plugin experimental actually tested PBS cluster. Please proceed caution report bugs https://github.com/wlandau/crew.cluster. launch PBS/TORQUE worker, launcher creates temporary job script call crew::crew_worker() submits PBS job qsub. see lines job script advance, use script() method launcher. lines except job name call crew::crew_worker(), inserted last minute time actually launch worker.","code":""},{"path":"/reference/crew_launcher_pbs.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create a launcher with PBS or TORQUE workers. — crew_launcher_pbs","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_launcher_sge.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a launcher with Sun Grid Engine (SGE) workers. — crew_launcher_sge","title":" Create a launcher with Sun Grid Engine (SGE) workers. — crew_launcher_sge","text":"Create R6 object launch maintain workers Sun Grid Engine (SGE) jobs.","code":""},{"path":"/reference/crew_launcher_sge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a launcher with Sun Grid Engine (SGE) workers. — crew_launcher_sge","text":"","code":"crew_launcher_sge(   name = NULL,   workers = 1L,   seconds_interval = 0.5,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = 300,   seconds_wall = Inf,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = NULL,   reset_packages = NULL,   reset_options = NULL,   garbage_collection = NULL,   crashes_error = NULL,   tls = crew::crew_tls(mode = \"automatic\"),   r_arguments = c(\"--no-save\", \"--no-restore\"),   options_metrics = crew::crew_options_metrics(),   options_cluster = crew.cluster::crew_options_sge(),   verbose = NULL,   command_submit = NULL,   command_terminate = NULL,   command_delete = NULL,   script_directory = NULL,   script_lines = NULL,   sge_cwd = NULL,   sge_envvars = NULL,   sge_log_output = NULL,   sge_log_error = NULL,   sge_log_join = NULL,   sge_memory_gigabytes_limit = NULL,   sge_memory_gigabytes_required = NULL,   sge_cores = NULL,   sge_gpu = NULL )"},{"path":"/reference/crew_launcher_sge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a launcher with Sun Grid Engine (SGE) workers. — crew_launcher_sge","text":"name Character string, name launcher. name NULL, name automatically generated launcher starts. workers Maximum number workers run concurrently auto-scaling, excluding task retries manual calls launch(). Special workers allocated task retries count towards limit, number workers running given time may exceed maximum. smaller number workers may run number executing tasks smaller supplied value workers argument. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete. certain cases, exponential backoff used argument passed seconds_max crew_throttle() object. seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use reset_globals option crew_controller() instead. reset_packages Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use reset_packages option crew_controller() instead. reset_options Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use reset_options option crew_controller() instead. garbage_collection Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use garbage_collection option crew_controller() instead. crashes_error Deprecated 2025-01-13 (crew version 0.10.2.9002). tls TLS configuration object crew_tls(). r_arguments Optional character vector command line arguments pass Rscript (non-Windows) Rscript.exe (Windows) starting worker. Example: r_arguments = c(\"--vanilla\", \"--max-connections=32\"). options_metrics Either NULL opt resource metric logging workers, object crew_options_metrics() enable configure resource metric logging workers. resource logging run, autometric R package version 0.1.0 higher must installed. options_cluster options list crew_options_sge() cluster-specific configuration options. verbose Deprecated. Use options_cluster instead. command_submit Deprecated. Use options_cluster instead. command_terminate Deprecated. Use options_cluster instead. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Deprecated. Use options_cluster instead. script_lines Deprecated. Use options_cluster instead. sge_cwd Deprecated. Use options_cluster instead. sge_envvars Deprecated. Use options_cluster instead. sge_log_output Deprecated. Use options_cluster instead. sge_log_error Deprecated. Use options_cluster instead. sge_log_join Deprecated. Use options_cluster instead. sge_memory_gigabytes_limit Deprecated. Use options_cluster instead. sge_memory_gigabytes_required Deprecated. Use options_cluster instead. sge_cores Deprecated. Use options_cluster instead. sge_gpu Deprecated. Use options_cluster instead.","code":""},{"path":"/reference/crew_launcher_sge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Create a launcher with Sun Grid Engine (SGE) workers. — crew_launcher_sge","text":"launch Sun Grid Engine (SGE) worker, launcher creates temporary job script call crew::crew_worker() submits SGE job qsub. see lines job script advance, use script() method launcher. lines except job name call crew::crew_worker(), inserted last minute time actually launch worker.","code":""},{"path":"/reference/crew_launcher_sge.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create a launcher with Sun Grid Engine (SGE) workers. — crew_launcher_sge","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_launcher_slurm.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a launcher with SLURM workers. — crew_launcher_slurm","title":" Create a launcher with SLURM workers. — crew_launcher_slurm","text":"Create R6 object launch maintain workers SLURM jobs.","code":""},{"path":"/reference/crew_launcher_slurm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a launcher with SLURM workers. — crew_launcher_slurm","text":"","code":"crew_launcher_slurm(   name = NULL,   workers = 1L,   seconds_interval = 0.5,   seconds_timeout = 60,   seconds_launch = 86400,   seconds_idle = 300,   seconds_wall = Inf,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = NULL,   reset_packages = NULL,   reset_options = NULL,   garbage_collection = NULL,   crashes_error = NULL,   tls = crew::crew_tls(mode = \"automatic\"),   r_arguments = c(\"--no-save\", \"--no-restore\"),   options_metrics = crew::crew_options_metrics(),   options_cluster = crew.cluster::crew_options_slurm(),   verbose = NULL,   command_submit = NULL,   command_terminate = NULL,   command_delete = NULL,   script_directory = NULL,   script_lines = NULL,   slurm_log_output = NULL,   slurm_log_error = NULL,   slurm_memory_gigabytes_required = NULL,   slurm_memory_gigabytes_per_cpu = NULL,   slurm_cpus_per_task = NULL,   slurm_time_minutes = NULL,   slurm_partition = NULL )"},{"path":"/reference/crew_launcher_slurm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a launcher with SLURM workers. — crew_launcher_slurm","text":"name Character string, name launcher. name NULL, name automatically generated launcher starts. workers Maximum number workers run concurrently auto-scaling, excluding task retries manual calls launch(). Special workers allocated task retries count towards limit, number workers running given time may exceed maximum. smaller number workers may run number executing tasks smaller supplied value workers argument. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete. certain cases, exponential backoff used argument passed seconds_max crew_throttle() object. seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use reset_globals option crew_controller() instead. reset_packages Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use reset_packages option crew_controller() instead. reset_options Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use reset_options option crew_controller() instead. garbage_collection Deprecated 2025-05-30 (crew version 1.1.2.9004). Please use garbage_collection option crew_controller() instead. crashes_error Deprecated 2025-01-13 (crew version 0.10.2.9002). tls TLS configuration object crew_tls(). r_arguments Optional character vector command line arguments pass Rscript (non-Windows) Rscript.exe (Windows) starting worker. Example: r_arguments = c(\"--vanilla\", \"--max-connections=32\"). options_metrics Either NULL opt resource metric logging workers, object crew_options_metrics() enable configure resource metric logging workers. resource logging run, autometric R package version 0.1.0 higher must installed. options_cluster options list crew_options_slurm() cluster-specific configuration options. verbose Deprecated. Use options_cluster instead. command_submit Deprecated. Use options_cluster instead. command_terminate Deprecated. Use options_cluster instead. command_delete Deprecated 2024-01-08 (version 0.1.4.9001). Use command_terminate instead. script_directory Deprecated. Use options_cluster instead. script_lines Deprecated. Use options_cluster instead. slurm_log_output Deprecated. Use options_cluster instead. slurm_log_error Deprecated. Use options_cluster instead. slurm_memory_gigabytes_required Deprecated. Use options_cluster instead. slurm_memory_gigabytes_per_cpu Deprecated. Use options_cluster instead. slurm_cpus_per_task Deprecated. Use options_cluster instead. slurm_time_minutes Deprecated. Use options_cluster instead. slurm_partition Deprecated. Use options_cluster instead.","code":""},{"path":"/reference/crew_launcher_slurm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Create a launcher with SLURM workers. — crew_launcher_slurm","text":"launch SLURM worker, launcher creates temporary job script call crew::crew_worker() submits SLURM job sbatch. see lines job script advance, use script() method launcher. lines except job name call crew::crew_worker(), inserted last minute time actually launch worker.","code":""},{"path":"/reference/crew_launcher_slurm.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" Create a launcher with SLURM workers. — crew_launcher_slurm","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_monitor_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":" Create an abstract cluster monitor object. — crew_monitor_cluster","title":" Create an abstract cluster monitor object. — crew_monitor_cluster","text":"Create abstract cluster monitor R6 object.","code":""},{"path":"/reference/crew_monitor_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create an abstract cluster monitor object. — crew_monitor_cluster","text":"","code":"crew_monitor_cluster(   verbose = TRUE,   command_list = as.character(Sys.which(\"qstat\")),   command_terminate = as.character(Sys.which(\"qdel\")) )"},{"path":"/reference/crew_monitor_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create an abstract cluster monitor object. — crew_monitor_cluster","text":"verbose Deprecated. Use options_cluster instead. command_list Character length 1, file path executable list jobs. command_terminate Deprecated. Use options_cluster instead.","code":""},{"path":[]},{"path":"/reference/crew_monitor_sge.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a SGE monitor object. — crew_monitor_sge","title":" Create a SGE monitor object. — crew_monitor_sge","text":"Create R6 object monitor SGE cluster jobs.","code":""},{"path":"/reference/crew_monitor_sge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a SGE monitor object. — crew_monitor_sge","text":"","code":"crew_monitor_sge(   verbose = TRUE,   command_list = as.character(Sys.which(\"qstat\")),   command_terminate = as.character(Sys.which(\"qdel\")) )"},{"path":"/reference/crew_monitor_sge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a SGE monitor object. — crew_monitor_sge","text":"verbose Deprecated. Use options_cluster instead. command_list Character length 1, file path executable list jobs. command_terminate Deprecated. Use options_cluster instead.","code":""},{"path":[]},{"path":"/reference/crew_monitor_slurm.html","id":null,"dir":"Reference","previous_headings":"","what":" Create a SLURM monitor object. — crew_monitor_slurm","title":" Create a SLURM monitor object. — crew_monitor_slurm","text":"Create R6 object monitor SLURM cluster jobs.","code":""},{"path":"/reference/crew_monitor_slurm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Create a SLURM monitor object. — crew_monitor_slurm","text":"","code":"crew_monitor_slurm(   verbose = TRUE,   command_list = as.character(Sys.which(\"squeue\")),   command_terminate = as.character(Sys.which(\"scancel\")) )"},{"path":"/reference/crew_monitor_slurm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Create a SLURM monitor object. — crew_monitor_slurm","text":"verbose Deprecated. Use options_cluster instead. command_list Character length 1, file path executable list jobs. command_terminate Deprecated. Use options_cluster instead.","code":""},{"path":[]},{"path":"/reference/crew_options_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Common abstract cluster options. — crew_options_cluster","title":"Common abstract cluster options. — crew_options_cluster","text":"Common abstract cluster options.","code":""},{"path":"/reference/crew_options_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common abstract cluster options. — crew_options_cluster","text":"","code":"crew_options_cluster(   verbose = FALSE,   command_submit = as.character(Sys.which(\"qsub\")),   command_terminate = as.character(Sys.which(\"qdel\")),   script_directory = tempdir(),   script_lines = character(0L) )"},{"path":"/reference/crew_options_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common abstract cluster options. — crew_options_cluster","text":"verbose Logical, whether see console output error messages submitting worker. command_submit Character length 1, file path executable submit worker job. command_terminate Character length 1, file path executable terminate worker job. Set \"\" skip manually terminating worker. Unless issue platform, job still exit thanks NNG-powered network programming capabilities mirai. Still, set command_terminate = \"\", assuming extra responsibility manually monitoring jobs cluster manually terminating jobs appropriate. script_directory Character length 1, directory path job scripts. Just job submission, job script created folder. Script base names unique launcher worker, launcher deletes script worker manually terminated. tempdir() default, might work systems. tools::R_user_dir(\"crew.cluster\", = \"cache\") another reasonable choice. script_lines Optional character vector additional lines added job script just common flags. example script_lines = \"module load R\" cluster supports R environment module.","code":""},{"path":"/reference/crew_options_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common abstract cluster options. — crew_options_cluster","text":"classed list options.","code":""},{"path":"/reference/crew_options_cluster.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":"Common abstract cluster options. — crew_options_cluster","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_options_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common abstract cluster options. — crew_options_cluster","text":"","code":"crew_options_cluster() #> $verbose #> [1] FALSE #>  #> $command_submit #> [1] \"\" #>  #> $command_terminate #> [1] \"\" #>  #> $script_directory #> [1] \"/tmp/RtmpiFr7R0\" #>  #> $script_lines #> character(0) #>  #> attr(,\"class\") #> [1] \"crew_options_cluster\" \"crew_options\""},{"path":"/reference/crew_options_lsf.html","id":null,"dir":"Reference","previous_headings":"","what":" LSF options. — crew_options_lsf","title":" LSF options. — crew_options_lsf","text":"Set options LSF job management.","code":""},{"path":"/reference/crew_options_lsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" LSF options. — crew_options_lsf","text":"","code":"crew_options_lsf(   verbose = FALSE,   command_submit = as.character(Sys.which(\"bsub\")),   command_terminate = as.character(Sys.which(\"bkill\")),   script_directory = tempdir(),   script_lines = character(0L),   cwd = getwd(),   log_output = \"/dev/null\",   log_error = \"/dev/null\",   memory_gigabytes_limit = NULL,   memory_gigabytes_required = NULL,   cores = NULL )"},{"path":"/reference/crew_options_lsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" LSF options. — crew_options_lsf","text":"verbose Logical, whether see console output error messages submitting worker. command_submit Character length 1, file path executable submit worker job. command_terminate Character length 1, file path executable terminate worker job. Set \"\" skip manually terminating worker. Unless issue platform, job still exit thanks NNG-powered network programming capabilities mirai. Still, set command_terminate = \"\", assuming extra responsibility manually monitoring jobs cluster manually terminating jobs appropriate. script_directory Character length 1, directory path job scripts. Just job submission, job script created folder. Script base names unique launcher worker, launcher deletes script worker manually terminated. tempdir() default, might work systems. tools::R_user_dir(\"crew.cluster\", = \"cache\") another reasonable choice. script_lines Optional character vector additional lines added job script just common flags. example script_lines = \"module load R\" cluster supports R environment module. cwd Character length 1, directory launch worker (opposed system default). cwd = \"/home\" translates line #BSUB -cwd /home LSF job script. cwd = getwd() default, launches workers current working directory. Set cwd = NULL omit line job script. log_output Character length 1, file pattern control locations LSF worker log files. default, standard output standard error go file. log_output = \"crew_log_%J.log\" translates line #BSUB -o crew_log_%J.log LSF job script, %J replaced job ID worker. default /dev/null omit logs. Set log_output = NULL omit line job script. log_error Character length 1, file pattern standard error. log_error = \"crew_error_%J.err\" translates line #BSUB -e crew_error_%J.err LSF job script, %J replaced job ID worker. default /dev/null omit logs. Set log_error = NULL omit line job script. memory_gigabytes_limit Positive numeric scalar, memory limit gigabytes worker. memory_gigabytes_limit = 4 translates line #BSUB -M 4G LSF job script. memory_gigabytes_limit = NULL omits line. memory_gigabytes_required Positive numeric scalar, memory requirement gigabytes. memory_gigabytes_required = 4 translates line #BSUB -R 'rusage[mem=4G]' LSF job script. memory_gigabytes_required = NULL omits line. cores Optional positive integer scalar, number CPU cores worker. cores = 4 translates line #BSUB -n 4 LSF job script. cores = NULL omits line.","code":""},{"path":"/reference/crew_options_lsf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":" LSF options. — crew_options_lsf","text":"classed list options.","code":""},{"path":"/reference/crew_options_lsf.html","id":"retryable-options","dir":"Reference","previous_headings":"","what":"Retryable options","title":" LSF options. — crew_options_lsf","text":"Retryable options deprecated crew.cluster 2025-01-27 (version 0.3.4).","code":""},{"path":"/reference/crew_options_lsf.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" LSF options. — crew_options_lsf","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_options_lsf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" LSF options. — crew_options_lsf","text":"","code":"crew_options_lsf() #> $verbose #> [1] FALSE #>  #> $command_submit #> [1] \"\" #>  #> $command_terminate #> [1] \"\" #>  #> $script_directory #> [1] \"/tmp/RtmpiFr7R0\" #>  #> $script_lines #> character(0) #>  #> $cwd #> [1] \"/home/runner/work/crew.cluster/crew.cluster/docs/reference\" #>  #> $log_output #> [1] \"/dev/null\" #>  #> $log_error #> [1] \"/dev/null\" #>  #> $memory_gigabytes_limit #> NULL #>  #> $memory_gigabytes_required #> NULL #>  #> $cores #> NULL #>  #> attr(,\"class\") #> [1] \"crew_options_lsf\"     \"crew_options_cluster\" \"crew_options\""},{"path":"/reference/crew_options_pbs.html","id":null,"dir":"Reference","previous_headings":"","what":" PBS options. — crew_options_pbs","title":" PBS options. — crew_options_pbs","text":"Set options PBS job management.","code":""},{"path":"/reference/crew_options_pbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" PBS options. — crew_options_pbs","text":"","code":"crew_options_pbs(   verbose = FALSE,   command_submit = as.character(Sys.which(\"qsub\")),   command_terminate = as.character(Sys.which(\"qdel\")),   script_directory = tempdir(),   script_lines = character(0L),   cwd = TRUE,   log_output = \"/dev/null\",   log_error = NULL,   log_join = TRUE,   memory_gigabytes_required = NULL,   cores = NULL,   walltime_hours = 12 )"},{"path":"/reference/crew_options_pbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" PBS options. — crew_options_pbs","text":"verbose Logical, whether see console output error messages submitting worker. command_submit Character length 1, file path executable submit worker job. command_terminate Character length 1, file path executable terminate worker job. Set \"\" skip manually terminating worker. Unless issue platform, job still exit thanks NNG-powered network programming capabilities mirai. Still, set command_terminate = \"\", assuming extra responsibility manually monitoring jobs cluster manually terminating jobs appropriate. script_directory Character length 1, directory path job scripts. Just job submission, job script created folder. Script base names unique launcher worker, launcher deletes script worker manually terminated. tempdir() default, might work systems. tools::R_user_dir(\"crew.cluster\", = \"cache\") another reasonable choice. script_lines Optional character vector additional lines added job script just common flags. example script_lines = \"module load R\" cluster supports R environment module. cwd Logical length 1, whether set working directory worker working directory launched . cwd = TRUE translates line cd \"$O_WORKDIR\" job script. line inserted content script_lines make sure #PBS directives system commands. cwd = FALSE omits line. log_output Character length 1, file directory path PBS worker log files standard output. log_output = \"VALUE\" translates line #PBS -o VALUE PBS job script. default /dev/null omit logs. supply non-/dev/null value, recommended supply directory path trailing slash worker gets set log files. log_error Character length 1, file directory path PBS worker log files standard error. log_error = \"VALUE\" translates line #PBS -e VALUE PBS job script. default NULL omits line. supply non-/dev/null value, recommended supply directory path trailing slash worker gets set log files. log_join Logical, whether join stdout stderr log files together one file. log_join = TRUE translates line #PBS -j oe PBS job script, log_join = FALSE equivalent #PBS -j n. log_join = TRUE, log_error NULL. memory_gigabytes_required Optional positive numeric scalar, gigabytes memory required run worker. memory_gigabytes_required = 2.4 translates line #PBS -l mem=2.4gb PBS job script. memory_gigabytes_required = NULL omits line. cores Optional positive integer scalar, number cores worker (\"slots\" PBS lingo). cores = 4 translates line #PBS -l ppn=4 PBS job script. cores = NULL omits line. walltime_hours Numeric scalar, hours wall time request worker. walltime_hours = 23 translates line #PBS -l walltime=23:00:00 job script. walltime_hours = NULL omits line.","code":""},{"path":"/reference/crew_options_pbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":" PBS options. — crew_options_pbs","text":"classed list options.","code":""},{"path":"/reference/crew_options_pbs.html","id":"retryable-options","dir":"Reference","previous_headings":"","what":"Retryable options","title":" PBS options. — crew_options_pbs","text":"Retryable options deprecated crew.cluster 2025-01-27 (version 0.3.4).","code":""},{"path":"/reference/crew_options_pbs.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" PBS options. — crew_options_pbs","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_options_pbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" PBS options. — crew_options_pbs","text":"","code":"crew_options_pbs() #> $verbose #> [1] FALSE #>  #> $command_submit #> [1] \"\" #>  #> $command_terminate #> [1] \"\" #>  #> $script_directory #> [1] \"/tmp/RtmpiFr7R0\" #>  #> $script_lines #> character(0) #>  #> $cwd #> [1] TRUE #>  #> $log_output #> [1] \"/dev/null\" #>  #> $log_error #> NULL #>  #> $log_join #> [1] TRUE #>  #> $memory_gigabytes_required #> NULL #>  #> $cores #> NULL #>  #> $walltime_hours #> [1] 12 #>  #> attr(,\"class\") #> [1] \"crew_options_pbs\"     \"crew_options_cluster\" \"crew_options\""},{"path":"/reference/crew_options_sge.html","id":null,"dir":"Reference","previous_headings":"","what":" SGE options. — crew_options_sge","title":" SGE options. — crew_options_sge","text":"Set options SGE job management.","code":""},{"path":"/reference/crew_options_sge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" SGE options. — crew_options_sge","text":"","code":"crew_options_sge(   verbose = FALSE,   command_submit = as.character(Sys.which(\"qsub\")),   command_terminate = as.character(Sys.which(\"qdel\")),   script_directory = tempdir(),   script_lines = character(0L),   cwd = TRUE,   envvars = FALSE,   log_output = \"/dev/null\",   log_error = NULL,   log_join = TRUE,   memory_gigabytes_limit = NULL,   memory_gigabytes_required = NULL,   cores = NULL,   gpu = NULL )"},{"path":"/reference/crew_options_sge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" SGE options. — crew_options_sge","text":"verbose Logical, whether see console output error messages submitting worker. command_submit Character length 1, file path executable submit worker job. command_terminate Character length 1, file path executable terminate worker job. Set \"\" skip manually terminating worker. Unless issue platform, job still exit thanks NNG-powered network programming capabilities mirai. Still, set command_terminate = \"\", assuming extra responsibility manually monitoring jobs cluster manually terminating jobs appropriate. script_directory Character length 1, directory path job scripts. Just job submission, job script created folder. Script base names unique launcher worker, launcher deletes script worker manually terminated. tempdir() default, might work systems. tools::R_user_dir(\"crew.cluster\", = \"cache\") another reasonable choice. script_lines Optional character vector additional lines added job script just common flags. example script_lines = \"module load R\" cluster supports R environment module. cwd Logical length 1, whether launch worker current working directory (opposed user home directory). cwd = TRUE translates line #$ -cwd SGE job script. cwd = FALSE omits line. envvars Logical length 1, whether forward environment variables current session SGE worker. envvars = TRUE translates line #$ -V SGE job script. envvars = FALSE omits line. log_output Character length 1, file directory path SGE worker log files standard output. log_output = \"VALUE\" translates line #$ -o VALUE SGE job script. default /dev/null omit logs. supply non-/dev/null value, recommended supply directory path trailing slash worker gets set log files. log_error Character length 1, file directory path SGE worker log files standard error. log_error = \"VALUE\" translates line #$ -e VALUE SGE job script. default NULL omits line. supply non-/dev/null value, recommended supply directory path trailing slash worker gets set log files. log_join Logical, whether join stdout stderr log files together one file. log_join = TRUE translates line #$ -j y SGE job script, log_join = FALSE equivalent #$ -j n. log_join = TRUE, log_error NULL. memory_gigabytes_limit Optional numeric scalar, maximum number gigabytes memory worker allowed consume. worker consumes level memory, SGE terminate . memory_gigabytes_limit = 5.7\" translates line \"#$ -l h_rss=5.7G\" SGE job script. memory_gigabytes_limit = NULL omits line. memory_gigabytes_required Optional positive numeric scalar, gigabytes memory required run worker. memory_gigabytes_required = 2.4 translates line #$ -l m_mem_free=2.4G SGE job script. memory_gigabytes_required = NULL omits line. cores Optional positive integer scalar, number cores per worker (\"slots\" SGE lingo). cores = 4 translates line #$ -pe smp 4 SGE job script. cores = NULL omits line. gpu Optional integer scalar, number GPUs request worker. gpu = 1 translates line \"#$ -l gpu=1\" SGE job script. gpu = NULL omits line.","code":""},{"path":"/reference/crew_options_sge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":" SGE options. — crew_options_sge","text":"classed list options.","code":""},{"path":"/reference/crew_options_sge.html","id":"retryable-options","dir":"Reference","previous_headings":"","what":"Retryable options","title":" SGE options. — crew_options_sge","text":"Retryable options deprecated crew.cluster 2025-01-27 (version 0.3.4).","code":""},{"path":"/reference/crew_options_sge.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" SGE options. — crew_options_sge","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_options_sge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" SGE options. — crew_options_sge","text":"","code":"crew_options_sge() #> $verbose #> [1] FALSE #>  #> $command_submit #> [1] \"\" #>  #> $command_terminate #> [1] \"\" #>  #> $script_directory #> [1] \"/tmp/RtmpiFr7R0\" #>  #> $script_lines #> character(0) #>  #> $cwd #> [1] TRUE #>  #> $envvars #> [1] FALSE #>  #> $log_output #> [1] \"/dev/null\" #>  #> $log_error #> NULL #>  #> $log_join #> [1] TRUE #>  #> $memory_gigabytes_limit #> NULL #>  #> $memory_gigabytes_required #> NULL #>  #> $cores #> NULL #>  #> $gpu #> NULL #>  #> attr(,\"class\") #> [1] \"crew_options_sge\"     \"crew_options_cluster\" \"crew_options\""},{"path":"/reference/crew_options_slurm.html","id":null,"dir":"Reference","previous_headings":"","what":" SLURM options. — crew_options_slurm","title":" SLURM options. — crew_options_slurm","text":"Set options SLURM job management.","code":""},{"path":"/reference/crew_options_slurm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" SLURM options. — crew_options_slurm","text":"","code":"crew_options_slurm(   verbose = FALSE,   command_submit = as.character(Sys.which(\"sbatch\")),   command_terminate = as.character(Sys.which(\"scancel\")),   script_directory = tempdir(),   script_lines = character(0L),   log_output = \"/dev/null\",   log_error = \"/dev/null\",   memory_gigabytes_required = NULL,   memory_gigabytes_per_cpu = NULL,   cpus_per_task = NULL,   time_minutes = NULL,   partition = NULL,   n_tasks = 1 )"},{"path":"/reference/crew_options_slurm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" SLURM options. — crew_options_slurm","text":"verbose Logical, whether see console output error messages submitting worker. command_submit Character length 1, file path executable submit worker job. command_terminate Character length 1, file path executable terminate worker job. Set \"\" skip manually terminating worker. Unless issue platform, job still exit thanks NNG-powered network programming capabilities mirai. Still, set command_terminate = \"\", assuming extra responsibility manually monitoring jobs cluster manually terminating jobs appropriate. script_directory Character length 1, directory path job scripts. Just job submission, job script created folder. Script base names unique launcher worker, launcher deletes script worker manually terminated. tempdir() default, might work systems. tools::R_user_dir(\"crew.cluster\", = \"cache\") another reasonable choice. script_lines Optional character vector additional lines added job script just common flags. example script_lines = \"module load R\" cluster supports R environment module. log_output Character length 1, file pattern control locations SLURM worker log files. default, standard output standard error go file. log_output = \"crew_log_%.txt\" translates line #SBATCH --output=crew_log_%.txt SLURM job script, %replaced job ID worker. default /dev/null omit logs. Set log_output = NULL omit line job script. log_error Character length 1, file pattern standard error. log_error = \"crew_log_%.txt\" translates line #SBATCH --error=crew_log_%.txt SLURM job script, %replaced job ID worker. default /dev/null omit logs. Set log_error = NULL omit line job script. memory_gigabytes_required Positive numeric scalar, total number gigabytes memory required per node. memory_gigabytes_required = 2.40123 translates line #SBATCH --mem=2041M SLURM job script. memory_gigabytes_required = NULL omits line. memory_gigabytes_per_cpu Positive numeric scalar, gigabytes memory required per CPU. memory_gigabytes_per_cpu = 2.40123 translates line #SBATCH --mem-per-cpu=2041M SLURM job script. memory_gigabytes_per_cpu = NULL omits line. cpus_per_task Optional positive integer scalar, number CPUs worker. cpus_per_task = 4 translates line #SBATCH --cpus-per-task=4 SLURM job script. cpus_per_task = NULL omits line. time_minutes Numeric scalar, number minutes designate wall time crew worker instance SLURM cluster. time_minutes = 60 translates line #SBATCH --time=60 SLURM job script. time_minutes = NULL omits line. partition Character string, name SLURM partition create workers . partition = \"partition1,partition2\" translates line #SBATCH --partition=partition1,partition2 SLURM job script. partition = NULL omits line. n_tasks Numeric scalar, number SLURM tasks run within job. n_tasks = 1 translates line #SBATCH --ntasks=1 SLURM job script. n_tasks = 0 omits line.","code":""},{"path":"/reference/crew_options_slurm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":" SLURM options. — crew_options_slurm","text":"classed list options.","code":""},{"path":"/reference/crew_options_slurm.html","id":"retryable-options","dir":"Reference","previous_headings":"","what":"Retryable options","title":" SLURM options. — crew_options_slurm","text":"Retryable options deprecated crew.cluster 2025-01-27 (version 0.3.4).","code":""},{"path":"/reference/crew_options_slurm.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":" SLURM options. — crew_options_slurm","text":"template files https://github.com/mschubert/clustermq/tree/master/inst informed development crew launcher plugins crew.cluster, like thank Michael Schubert developing clustermq releasing permissive Apache License 2.0. See NOTICE README.md files crew.cluster source code additional attribution.","code":""},{"path":[]},{"path":"/reference/crew_options_slurm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" SLURM options. — crew_options_slurm","text":"","code":"crew_options_slurm() #> $verbose #> [1] FALSE #>  #> $command_submit #> [1] \"\" #>  #> $command_terminate #> [1] \"\" #>  #> $script_directory #> [1] \"/tmp/RtmpiFr7R0\" #>  #> $script_lines #> character(0) #>  #> $log_output #> [1] \"/dev/null\" #>  #> $log_error #> [1] \"/dev/null\" #>  #> $memory_gigabytes_per_cpu #> NULL #>  #> $memory_gigabytes_required #> NULL #>  #> $cpus_per_task #> NULL #>  #> $time_minutes #> NULL #>  #> $partition #> NULL #>  #> $n_tasks #> [1] 1 #>  #> attr(,\"class\") #> [1] \"crew_options_slurm\"   \"crew_options_cluster\" \"crew_options\""},{"path":[]},{"path":"/news/index.html","id":"crewcluster-038","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.3.8","title":"crew.cluster 0.3.8","text":"CRAN release: 2025-06-09 Use expect_no_error() instead expect_silent() ensure compatibility deprecation cycle fix https://github.com/wlandau/crew/issues/217.","code":""},{"path":"/news/index.html","id":"crewcluster-037","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.3.7","title":"crew.cluster 0.3.7","text":"CRAN release: 2025-04-14 Add n_tasks crew_options_slurm()","code":""},{"path":"/news/index.html","id":"crewcluster-036","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.3.6","title":"crew.cluster 0.3.6","text":"Fix links.","code":""},{"path":"/news/index.html","id":"crewcluster-035","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.3.5","title":"crew.cluster 0.3.5","text":"Add new serialization argument controllers.","code":""},{"path":"/news/index.html","id":"crewcluster-034","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.3.4","title":"crew.cluster 0.3.4","text":"CRAN release: 2025-02-05 Deprecate retryable options crew 1.0.0 moved away .","code":""},{"path":"/news/index.html","id":"crewcluster-033","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.3.3","title":"crew.cluster 0.3.3","text":"CRAN release: 2024-11-18 Add slurm_memory_gigabytes_required set --mem SLURM (#44, @multimeric). Add r_arguments accept R command line arguments workers. Support options_metrics. Organize arguments options lists. Use crashes_error crew. Implement retryable options memory, cores, GPUs, wall time, SLURM partition (#48, @stemangiola). Set default seconds_idle 300.","code":""},{"path":"/news/index.html","id":"crewcluster-032","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.3.2","title":"crew.cluster 0.3.2","text":"CRAN release: 2024-07-10 Add retry_tasks argument.","code":""},{"path":"/news/index.html","id":"crewcluster-031","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.3.1","title":"crew.cluster 0.3.1","text":"CRAN release: 2024-04-24 Add SLURM monitor (#32, @brendanf).","code":""},{"path":"/news/index.html","id":"crewcluster-030","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.3.0","title":"crew.cluster 0.3.0","text":"CRAN release: 2024-02-08 Create abstract monitor class cluster-specific monitor classes inherit (#32). Require crew >= 0.8.0. Raise seconds_timeout 60 across controllers.","code":""},{"path":"/news/index.html","id":"crewcluster-020","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.2.0","title":"crew.cluster 0.2.0","text":"CRAN release: 2024-01-08 Re-enable unit tests. Require crew >= 0.7.0. Add “monitor” class SGE clusters conveniently list terminate jobs. Deprecate command_delete favor command_terminate.","code":""},{"path":"/news/index.html","id":"crewcluster-014","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.1.4","title":"crew.cluster 0.1.4","text":"CRAN release: 2023-12-10 Refactor methods development crew. Encapsulate non-function R6 members inside private list. Encapsulate functions launch/termination commands inside R6 private list.","code":""},{"path":"/news/index.html","id":"crewcluster-013","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.1.3","title":"crew.cluster 0.1.3","text":"CRAN release: 2023-10-17 Deprecate seconds_exit (https://github.com/wlandau/crew/issues/125, @shikokuchuo). Deprecate seconds_interval (https://github.com/wlandau/crew/issues/131). Add new slurm_partition argument SLURM controller launcher (#24, @kkmann). Turn automatic TLS encryption default.","code":""},{"path":"/news/index.html","id":"crewcluster-012","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.1.2","title":"crew.cluster 0.1.2","text":"CRAN release: 2023-09-20 Require crew >= 0.5.0. Add new slurm_time_minutes SLURM wall time (#1, @cfljam). Enable TLS. Use MB format memory SLURM launcher (#22, @kendonB). Use launch_max crew_tls() crew 0.5.0.","code":""},{"path":"/news/index.html","id":"crewcluster-011","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.1.1","title":"crew.cluster 0.1.1","text":"CRAN release: 2023-06-15 Align breaking changes crew 0.3.0. Increase seconds_launch 86400 (1 day).","code":""},{"path":"/news/index.html","id":"crewcluster-010","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.1.0","title":"crew.cluster 0.1.0","text":"CRAN release: 2023-05-19 Submit workers asynchronously (#2). Use system2() instead processx submit workers (#2). Add verbose argument SGE launcher optionally print system2() stdout stderr. Implement SLURM PBS/TORQUE launchers (#1, #5, #6). Create abstract cluster launcher class combine common elements cluster launchers. Add script_directory argument customize location job scripts (#3, @mglev1n). Implement LSF launcher (#4, @mglev1n).","code":""},{"path":"/news/index.html","id":"crewcluster-002","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.0.2","title":"crew.cluster 0.0.2","text":"CRAN release: 2023-04-25 Fix author spelling DESCRIPTION file.","code":""},{"path":"/news/index.html","id":"crewcluster-001","dir":"Changelog","previous_headings":"","what":"crew.cluster 0.0.1","title":"crew.cluster 0.0.1","text":"First version.","code":""}]
